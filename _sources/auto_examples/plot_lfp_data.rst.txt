

.. _sphx_glr_auto_examples_plot_lfp_data.py:


==============================
CSC to learn LFP spiking atoms
==============================

Here, we show how CSC can be used to learn spiking
atoms from Local Field Potential (LFP) data [1].

[1] Hitziger, Sebastian, et al.
    Adaptive Waveform Learning: A Framework for Modeling Variability in
    Neurophysiological Signals. IEEE Transactions on Signal Processing (2017).

First, let us fetch the data (~14 MB)


.. code-block:: python

    import os
    from mne.utils import _fetch_file # noqa

    url = ('https://github.com/hitziger/AWL/raw/master/Experiments/data/'
           'LFP_data_contiguous_1250_Hz.mat')
    fname = './LFP_data_contiguous_1250_Hz.mat'
    if not os.path.exists(fname):
        _fetch_file(url, fname)







It is a mat file, so we use scipy to load it


.. code-block:: python

    from scipy import io # noqa

    data = io.loadmat(fname)
    X, sfreq = data['X'].T, float(data['sfreq'])







And now let us look at the data


.. code-block:: python

    import numpy as np # noqa
    import matplotlib.pyplot as plt # noqa

    start, stop = 11000, 15000
    times = np.arange(start, stop) / sfreq
    plt.plot(times, X[0, start:stop], color='b')
    plt.xlabel('Time (s)')
    plt.ylabel(r'$\mu$ V')
    plt.xlim([9., 12.])




.. image:: /auto_examples/images/sphx_glr_plot_lfp_data_001.png
    :align: center




and filter it using a convenient function from MNE. This will remove low
frequency drifts, but we keep the high frequencies


.. code-block:: python

    from mne.filter import filter_data # noqa
    X = filter_data(X.astype(np.float64), sfreq, l_freq=1, h_freq=None,
                    fir_design='firwin')





.. rst-class:: sphx-glr-script-out

 Out::

      Setting up high-pass filter at 1 Hz
    l_trans_bandwidth chosen to be 1.0 Hz
    Filter length of 4125 samples (3.300 sec) selected


Now, we define the parameters of our model.


.. code-block:: python


    reg = 6.0
    n_times = 2500
    n_times_atom = 350
    n_trials = 100
    n_atoms = 3
    n_iter = 60






Let's stick to one random state for now, but if you want to learn how to
select the random state, consult :ref:`this example
<sphx_glr_auto_examples_plot_simulate_randomstate.py>`.


.. code-block:: python

    random_state = 10







Now, we epoch the trials


.. code-block:: python


    overlap = 0
    starts = np.arange(0, X.shape[1] - n_times, n_times - overlap)
    stops = np.arange(n_times, X.shape[1], n_times - overlap)

    X_new = []
    for idx, (start, stop) in enumerate(zip(starts, stops)):
        if idx >= n_trials:
            break
        X_new.append(X[0, start:stop])
    X_new = np.vstack(X_new)
    del X







We remove the mean and scale to unit variance.


.. code-block:: python

    X_new -= np.mean(X_new)
    X_new /= np.std(X_new)







The convolutions can result in edge artifacts at the edges of the trials.
Therefore, we discount the contributions from the edges by windowing the
trials.


.. code-block:: python

    from numpy import hamming # noqa
    X_new *= hamming(n_times)[None, :]







Of course, in a data-limited setting we want to use as much of the data as
possible. If this is the case, you can set `overlap` to non-zero (for example
half the epoch length).

Now, we run regular CSC since the trials are not too noisy


.. code-block:: python

    from alphacsc import learn_d_z # noqa
    pobj, times, d_hat, Z_hat = learn_d_z(X_new, n_atoms, n_times_atom, reg=reg,
                                          n_iter=n_iter, random_state=random_state,
                                          n_jobs=1)





.. rst-class:: sphx-glr-script-out

 Out::

      Coordinate descent loop 0 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 174054.74134230
    Using method dual for projection
    [seed 10] Objective (d) 37428.93205832
    Coordinate descent loop 1 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 30329.27567991
    Using method dual for projection
    [seed 10] Objective (d) 27752.07709373
    Coordinate descent loop 2 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 25710.08131777
    Using method dual for projection
    [seed 10] Objective (d) 25107.04446020
    Coordinate descent loop 3 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 24334.49341832
    Using method dual for projection
    [seed 10] Objective (d) 24088.47449759
    Coordinate descent loop 4 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 23573.67536369
    Using method dual for projection
    [seed 10] Objective (d) 23384.51602947
    Coordinate descent loop 5 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 22492.60770465
    Using method dual for projection
    [seed 10] Objective (d) 22441.15903964
    Coordinate descent loop 6 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 21700.77415205
    Using method dual for projection
    [seed 10] Objective (d) 21644.77606132
    Coordinate descent loop 7 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 21132.79058456
    Using method dual for projection
    [seed 10] Objective (d) 21121.59340514
    Coordinate descent loop 8 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 20560.75613149
    Using method dual for projection
    [seed 10] Objective (d) 20538.45189717
    Coordinate descent loop 9 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 20101.76637428
    Using method dual for projection
    [seed 10] Objective (d) 20091.90695143
    Coordinate descent loop 10 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 19773.78188673
    Using method dual for projection
    [seed 10] Objective (d) 19757.77020845
    Coordinate descent loop 11 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 19418.61028664
    Using method dual for projection
    [seed 10] Objective (d) 19421.36595352
    Coordinate descent loop 12 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 19186.35004923
    Using method dual for projection
    [seed 10] Objective (d) 19175.22129619
    Coordinate descent loop 13 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 18878.26840608
    Using method dual for projection
    [seed 10] Objective (d) 18871.78057048
    Coordinate descent loop 14 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 18666.45423841
    Using method dual for projection
    [seed 10] Objective (d) 18663.64395106
    Coordinate descent loop 15 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 18464.68178034
    Using method dual for projection
    [seed 10] Objective (d) 18461.92121317
    Coordinate descent loop 16 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 18300.21908166
    Using method dual for projection
    [seed 10] Objective (d) 18296.23064963
    Coordinate descent loop 17 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 18145.38882287
    Using method dual for projection
    [seed 10] Objective (d) 18141.88023835
    Coordinate descent loop 18 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17985.44041822
    Using method dual for projection
    [seed 10] Objective (d) 17987.71325384
    Coordinate descent loop 19 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17841.06461263
    Using method dual for projection
    [seed 10] Objective (d) 17848.33422153
    Coordinate descent loop 20 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17745.91302413
    Using method dual for projection
    [seed 10] Objective (d) 17728.57890715
    Coordinate descent loop 21 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17585.15958849
    Using method dual for projection
    [seed 10] Objective (d) 17596.52868213
    Coordinate descent loop 22 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17438.40660059
    Using method dual for projection
    [seed 10] Objective (d) 17423.13459017
    Coordinate descent loop 23 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17301.19031605
    Using method dual for projection
    [seed 10] Objective (d) 17296.64572174
    Coordinate descent loop 24 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17215.47268901
    Using method dual for projection
    [seed 10] Objective (d) 17213.03677483
    Coordinate descent loop 25 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17123.39743584
    Using method dual for projection
    [seed 10] Objective (d) 17122.17209905
    Coordinate descent loop 26 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17042.84333509
    Using method dual for projection
    [seed 10] Objective (d) 17041.48704969
    Coordinate descent loop 27 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16960.23888566
    Using method dual for projection
    [seed 10] Objective (d) 16958.57125512
    Coordinate descent loop 28 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16896.91468844
    Using method dual for projection
    [seed 10] Objective (d) 16914.32062126
    Coordinate descent loop 29 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16865.08205100
    Using method dual for projection
    [seed 10] Objective (d) 16845.63702206
    Coordinate descent loop 30 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16781.49710838
    Using method dual for projection
    [seed 10] Objective (d) 16780.14367516
    Coordinate descent loop 31 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16721.80336868
    Using method dual for projection
    [seed 10] Objective (d) 16721.23947154
    Coordinate descent loop 32 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16652.49096476
    Using method dual for projection
    [seed 10] Objective (d) 16651.45717988
    Coordinate descent loop 33 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16595.04291115
    Using method dual for projection
    [seed 10] Objective (d) 16594.25330348
    Coordinate descent loop 34 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16544.59484566
    Using method dual for projection
    [seed 10] Objective (d) 16544.02715863
    Coordinate descent loop 35 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16497.38375752
    Using method dual for projection
    [seed 10] Objective (d) 16497.02588974
    Coordinate descent loop 36 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16458.05981154
    Using method dual for projection
    [seed 10] Objective (d) 16457.01107542
    Coordinate descent loop 37 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16420.19661993
    Using method dual for projection
    [seed 10] Objective (d) 16418.93947808
    Coordinate descent loop 38 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16377.15026771
    Using method dual for projection
    [seed 10] Objective (d) 16376.31062621
    Coordinate descent loop 39 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16346.54717472
    Using method dual for projection
    [seed 10] Objective (d) 16351.87113575
    Coordinate descent loop 40 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16326.73113581
    Using method dual for projection
    [seed 10] Objective (d) 16339.69916822
    Coordinate descent loop 41 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16319.42840512
    Using method dual for projection
    [seed 10] Objective (d) 16300.68240358
    Coordinate descent loop 42 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16270.33890720
    Using method dual for projection
    [seed 10] Objective (d) 16272.94782652
    Coordinate descent loop 43 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16247.30790111
    Using method dual for projection
    [seed 10] Objective (d) 16244.35997812
    Coordinate descent loop 44 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16207.23625932
    Using method dual for projection
    [seed 10] Objective (d) 16206.93809051
    Coordinate descent loop 45 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16184.19959094
    Using method dual for projection
    [seed 10] Objective (d) 16184.44156596
    Coordinate descent loop 46 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16168.92312096
    Using method dual for projection
    [seed 10] Objective (d) 16168.86303145
    Coordinate descent loop 47 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16153.74217902
    Using method dual for projection
    [seed 10] Objective (d) 16153.78563857
    Coordinate descent loop 48 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16133.05563964
    Using method dual for projection
    [seed 10] Objective (d) 16139.56835520
    Coordinate descent loop 49 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16122.84514078
    Using method dual for projection
    [seed 10] Objective (d) 16115.87812370
    Coordinate descent loop 50 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16103.85321897
    Using method dual for projection
    [seed 10] Objective (d) 16104.26712639
    Coordinate descent loop 51 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16092.49113025
    Using method dual for projection
    [seed 10] Objective (d) 16115.96322285
    Coordinate descent loop 52 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16102.83149041
    Using method dual for projection
    [seed 10] Objective (d) 16080.58293299
    Coordinate descent loop 53 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16068.86112401
    Using method dual for projection
    [seed 10] Objective (d) 16072.55869529
    Coordinate descent loop 54 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16064.63728009
    Using method dual for projection
    [seed 10] Objective (d) 16059.69395999
    Coordinate descent loop 55 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16048.38054976
    Using method dual for projection
    [seed 10] Objective (d) 16052.32347938
    Coordinate descent loop 56 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16044.06640795
    Using method dual for projection
    [seed 10] Objective (d) 16042.86995023
    Coordinate descent loop 57 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16033.77560010
    Using method dual for projection
    [seed 10] Objective (d) 16033.46528237
    Coordinate descent loop 58 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16022.44205206
    Using method dual for projection
    [seed 10] Objective (d) 16023.60253676
    Coordinate descent loop 59 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16016.57243750
    Using method dual for projection
    [seed 10] Objective (d) 16012.45764655


Let's look at the atoms now.


.. code-block:: python

    plt.figure()
    plt.plot(d_hat.T)
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_lfp_data_002.png
    :align: center




**Total running time of the script:**
(1 minutes 19.184 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_lfp_data.py <plot_lfp_data.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_lfp_data.ipynb <plot_lfp_data.ipynb>`

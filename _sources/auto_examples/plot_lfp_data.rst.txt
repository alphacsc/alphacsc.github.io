

.. _sphx_glr_auto_examples_plot_lfp_data.py:


==============================
CSC to learn LFP spiking atoms
==============================

Here, we show how CSC can be used to learn spiking
atoms from Local Field Potential (LFP) data [1].

[1] Hitziger, Sebastian, et al.
    Adaptive Waveform Learning: A Framework for Modeling Variability in
    Neurophysiological Signals. IEEE Transactions on Signal Processing (2017).


First, let us fetch the data (~14 MB)



.. code-block:: python

    import os
    from mne.utils import _fetch_file # noqa

    url = ('https://github.com/hitziger/AWL/raw/master/Experiments/data/'
           'LFP_data_contiguous_1250_Hz.mat')
    fname = './LFP_data_contiguous_1250_Hz.mat'
    if not os.path.exists(fname):
        _fetch_file(url, fname)







It is a mat file, so we use scipy to load it



.. code-block:: python

    from scipy import io # noqa

    data = io.loadmat(fname)
    X, sfreq = data['X'].T, float(data['sfreq'])







And now let us look at the data



.. code-block:: python

    import numpy as np # noqa
    import matplotlib.pyplot as plt # noqa

    start, stop = 11000, 15000
    times = np.arange(start, stop) / sfreq
    plt.plot(times, X[0, start:stop], color='b')
    plt.xlabel('Time (s)')
    plt.ylabel(r'$\mu$ V')
    plt.xlim([9., 12.])




.. image:: /auto_examples/images/sphx_glr_plot_lfp_data_001.png
    :align: center




and filter it using a convenient function from MNE. This will remove low
frequency drifts, but we keep the high frequencies



.. code-block:: python

    from mne.filter import filter_data # noqa
    X = filter_data(X.astype(np.float64), sfreq, l_freq=1, h_freq=None,
                    fir_design='firwin')





.. rst-class:: sphx-glr-script-out

 Out::

    Setting up high-pass filter at 1 Hz
    l_trans_bandwidth chosen to be 1.0 Hz
    Filter length of 4125 samples (3.300 sec) selected


Now, we define the parameters of our model.



.. code-block:: python


    reg = 6.0
    n_times = 2500
    n_times_atom = 350
    n_trials = 100
    n_atoms = 3
    n_iter = 60






Let's stick to one random state for now, but if you want to learn how to
select the random state, consult :ref:`this example
<sphx_glr_auto_examples_plot_simulate_randomstate.py>`.



.. code-block:: python

    random_state = 10







Now, we epoch the trials



.. code-block:: python


    overlap = 0
    starts = np.arange(0, X.shape[1] - n_times, n_times - overlap)
    stops = np.arange(n_times, X.shape[1], n_times - overlap)

    X_new = []
    for idx, (start, stop) in enumerate(zip(starts, stops)):
        if idx >= n_trials:
            break
        X_new.append(X[0, start:stop])
    X_new = np.vstack(X_new)
    del X







We remove the mean and scale to unit variance.



.. code-block:: python

    X_new -= np.mean(X_new)
    X_new /= np.std(X_new)







The convolutions can result in edge artifacts at the edges of the trials.
Therefore, we discount the contributions from the edges by windowing the
trials.



.. code-block:: python

    from numpy import hamming # noqa
    X_new *= hamming(n_times)[None, :]







Of course, in a data-limited setting we want to use as much of the data as
possible. If this is the case, you can set `overlap` to non-zero (for example
half the epoch length).

Now, we run regular CSC since the trials are not too noisy



.. code-block:: python

    from alphacsc import learn_d_z # noqa
    pobj, times, d_hat, Z_hat = learn_d_z(X_new, n_atoms, n_times_atom, reg=reg,
                                          n_iter=n_iter, random_state=random_state,
                                          n_jobs=1)





.. rst-class:: sphx-glr-script-out

 Out::

    Coordinate descent loop 0 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 174054.74134230
    Using method dual for projection
    [seed 10] Objective (d) 37428.93205832
    Coordinate descent loop 1 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 30329.27567991
    Using method dual for projection
    [seed 10] Objective (d) 27752.07709373
    Coordinate descent loop 2 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 25710.08131777
    Using method dual for projection
    [seed 10] Objective (d) 25107.04446020
    Coordinate descent loop 3 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 24334.49341832
    Using method dual for projection
    [seed 10] Objective (d) 24088.47449759
    Coordinate descent loop 4 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 23573.67536369
    Using method dual for projection
    [seed 10] Objective (d) 23384.51602946
    Coordinate descent loop 5 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 22492.60770465
    Using method dual for projection
    [seed 10] Objective (d) 22441.15903964
    Coordinate descent loop 6 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 21700.77415205
    Using method dual for projection
    [seed 10] Objective (d) 21644.77606132
    Coordinate descent loop 7 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 21132.79058456
    Using method dual for projection
    [seed 10] Objective (d) 21121.59340514
    Coordinate descent loop 8 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 20560.75613150
    Using method dual for projection
    [seed 10] Objective (d) 20538.45189717
    Coordinate descent loop 9 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 20101.76637428
    Using method dual for projection
    [seed 10] Objective (d) 20091.90695143
    Coordinate descent loop 10 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 19773.78188673
    Using method dual for projection
    [seed 10] Objective (d) 19757.77020844
    Coordinate descent loop 11 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 19418.61028664
    Using method dual for projection
    [seed 10] Objective (d) 19421.36595352
    Coordinate descent loop 12 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 19186.35004924
    Using method dual for projection
    [seed 10] Objective (d) 19175.22129619
    Coordinate descent loop 13 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 18878.26840608
    Using method dual for projection
    [seed 10] Objective (d) 18871.78057048
    Coordinate descent loop 14 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 18666.45423841
    Using method dual for projection
    [seed 10] Objective (d) 18663.64395106
    Coordinate descent loop 15 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 18464.68178034
    Using method dual for projection
    [seed 10] Objective (d) 18461.92121317
    Coordinate descent loop 16 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 18300.21908164
    Using method dual for projection
    [seed 10] Objective (d) 18296.23064961
    Coordinate descent loop 17 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 18145.38882281
    Using method dual for projection
    [seed 10] Objective (d) 18141.88023829
    Coordinate descent loop 18 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17985.44041813
    Using method dual for projection
    [seed 10] Objective (d) 17987.71325374
    Coordinate descent loop 19 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17841.06461259
    Using method dual for projection
    [seed 10] Objective (d) 17848.33422148
    Coordinate descent loop 20 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17745.91302387
    Using method dual for projection
    [seed 10] Objective (d) 17728.57890690
    Coordinate descent loop 21 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17585.15958806
    Using method dual for projection
    [seed 10] Objective (d) 17596.52868138
    Coordinate descent loop 22 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17438.40659989
    Using method dual for projection
    [seed 10] Objective (d) 17423.13458982
    Coordinate descent loop 23 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17301.19031568
    Using method dual for projection
    [seed 10] Objective (d) 17296.64572129
    Coordinate descent loop 24 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17215.47268840
    Using method dual for projection
    [seed 10] Objective (d) 17213.03677423
    Coordinate descent loop 25 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17123.39743502
    Using method dual for projection
    [seed 10] Objective (d) 17122.17209823
    Coordinate descent loop 26 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 17042.84333416
    Using method dual for projection
    [seed 10] Objective (d) 17041.48704878
    Coordinate descent loop 27 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16960.23888355
    Using method dual for projection
    [seed 10] Objective (d) 16958.57125294
    Coordinate descent loop 28 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16896.91468966
    Using method dual for projection
    [seed 10] Objective (d) 16914.32062067
    Coordinate descent loop 29 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16865.08204192
    Using method dual for projection
    [seed 10] Objective (d) 16845.63701529
    Coordinate descent loop 30 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16781.49709793
    Using method dual for projection
    [seed 10] Objective (d) 16780.14366461
    Coordinate descent loop 31 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16721.80336422
    Using method dual for projection
    [seed 10] Objective (d) 16721.23946706
    Coordinate descent loop 32 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16652.49095184
    Using method dual for projection
    [seed 10] Objective (d) 16651.45716684
    Coordinate descent loop 33 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16595.04289592
    Using method dual for projection
    [seed 10] Objective (d) 16594.25328782
    Coordinate descent loop 34 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16544.59485296
    Using method dual for projection
    [seed 10] Objective (d) 16544.02716533
    Coordinate descent loop 35 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16497.38373313
    Using method dual for projection
    [seed 10] Objective (d) 16497.02586689
    Coordinate descent loop 36 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16458.05970835
    Using method dual for projection
    [seed 10] Objective (d) 16457.01096394
    Coordinate descent loop 37 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16420.19661698
    Using method dual for projection
    [seed 10] Objective (d) 16418.93948738
    Coordinate descent loop 38 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16377.15037191
    Using method dual for projection
    [seed 10] Objective (d) 16376.31073330
    Coordinate descent loop 39 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16346.54725977
    Using method dual for projection
    [seed 10] Objective (d) 16351.87098258
    Coordinate descent loop 40 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16326.73106481
    Using method dual for projection
    [seed 10] Objective (d) 16339.69876784
    Coordinate descent loop 41 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16319.42789268
    Using method dual for projection
    [seed 10] Objective (d) 16300.68258128
    Coordinate descent loop 42 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16270.33215077
    Using method dual for projection
    [seed 10] Objective (d) 16272.94321353
    Coordinate descent loop 43 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16247.31093219
    Using method dual for projection
    [seed 10] Objective (d) 16244.36042378
    Coordinate descent loop 44 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16207.24479185
    Using method dual for projection
    [seed 10] Objective (d) 16206.94612057
    Coordinate descent loop 45 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16184.19778615
    Using method dual for projection
    [seed 10] Objective (d) 16184.43668266
    Coordinate descent loop 46 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16168.91756234
    Using method dual for projection
    [seed 10] Objective (d) 16168.85760316
    Coordinate descent loop 47 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16153.70477672
    Using method dual for projection
    [seed 10] Objective (d) 16153.74275107
    Coordinate descent loop 48 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16132.99492537
    Using method dual for projection
    [seed 10] Objective (d) 16139.70154416
    Coordinate descent loop 49 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16122.98433136
    Using method dual for projection
    [seed 10] Objective (d) 16115.57474623
    Coordinate descent loop 50 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16101.66155652
    Using method dual for projection
    [seed 10] Objective (d) 16104.47635681
    Coordinate descent loop 51 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16089.61734814
    Using method dual for projection
    [seed 10] Objective (d) 16111.31442669
    Coordinate descent loop 52 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16101.08039488
    Using method dual for projection
    [seed 10] Objective (d) 16103.61758667
    Coordinate descent loop 53 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16094.08434850
    Using method dual for projection
    [seed 10] Objective (d) 16067.00637321
    Coordinate descent loop 54 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16057.59697184
    Using method dual for projection
    [seed 10] Objective (d) 16057.52900889
    Coordinate descent loop 55 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16045.03530403
    Using method dual for projection
    [seed 10] Objective (d) 16044.93408215
    Coordinate descent loop 56 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16029.22234371
    Using method dual for projection
    [seed 10] Objective (d) 16029.03267237
    Coordinate descent loop 57 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16019.97545831
    Using method dual for projection
    [seed 10] Objective (d) 16020.24618850
    Coordinate descent loop 58 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16012.23811867
    Using method dual for projection
    [seed 10] Objective (d) 16015.09520047
    Coordinate descent loop 59 / 60 [n_jobs=1]
    [seed 10] Objective (Z) : 16008.35823547
    Using method dual for projection
    [seed 10] Objective (d) 16012.50178577


Let's look at the atoms now.



.. code-block:: python

    plt.figure()
    plt.plot(d_hat.T)
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_lfp_data_002.png
    :align: center




**Total running time of the script:** ( 1 minutes  28.522 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_lfp_data.py <plot_lfp_data.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_lfp_data.ipynb <plot_lfp_data.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_

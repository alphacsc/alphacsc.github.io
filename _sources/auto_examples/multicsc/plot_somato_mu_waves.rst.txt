
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multicsc/plot_somato_mu_waves.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multicsc_plot_somato_mu_waves.py:


===========================================================
Extracting :math:`\mu`-wave from the somato-sensory dataset
===========================================================

This example illustrates how to learn rank-1 atoms [1]_ on the multivariate
somato-sensorymotor dataset from :code:`mne`. The displayed results highlight
the presence of :math:`\mu`-waves located in the SI cortex.

.. [1] Dupré La Tour, T., Moreau, T., Jas, M., & Gramfort, A. (2018).
    `Multivariate Convolutional Sparse Coding for Electromagnetic Brain Signals
    <https://arxiv.org/abs/1805.09654v2>`_. Advances in Neural Information
    Processing Systems (NIPS).

.. GENERATED FROM PYTHON SOURCE LINES 15-23

.. code-block:: default


    # Authors: Thomas Moreau <thomas.moreau@inria.fr>
    #          Mainak Jas <mainak.jas@telecom-paristech.fr>
    #          Tom Dupre La Tour <tom.duprelatour@telecom-paristech.fr>
    #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Let us first define the parameters of our model.

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default


    sfreq = 150.

    # Define the shape of the dictionary
    n_atoms = 25
    n_times_atom = int(round(sfreq * 1.0))  # 1000. ms








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Next, we define the parameters for multivariate CSC

.. GENERATED FROM PYTHON SOURCE LINES 34-56

.. code-block:: default


    from alphacsc import BatchCDL
    cdl = BatchCDL(
        # Shape of the dictionary
        n_atoms=n_atoms,
        n_times_atom=n_times_atom,
        # Request a rank1 dictionary with unit norm temporal and spatial maps
        rank1=True, uv_constraint='separate',
        # Initialize the dictionary with random chunk from the data
        D_init='chunk',
        # rescale the regularization parameter to be 20% of lambda_max
        lmbd_max="scaled", reg=.2,
        # Number of iteration for the alternate minimization and cvg threshold
        n_iter=100, eps=1e-4,
        # solver for the z-step
        solver_z="lgcd", solver_z_kwargs={'tol': 1e-2, 'max_iter': 1000},
        # solver for the d-step
        solver_d='alternate_adaptive', solver_d_kwargs={'max_iter': 300},
        # Technical parameters
        verbose=1, random_state=0, n_jobs=6)









.. GENERATED FROM PYTHON SOURCE LINES 57-60

Here, we load the data from the somato-sensory dataset and preprocess them
in epochs. The epochs are selected around the stim, starting 2 seconds
before and finishing 4 seconds after.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default


    from alphacsc.datasets.mne_data import load_data
    t_lim = (-2, 4)
    X, info = load_data(dataset='somato', epoch=t_lim, sfreq=sfreq)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for somato...
      0%|                                               | 0.00/611M [00:00<?, ?B/s]      1%|▎                                     | 4.20M/611M [00:00<00:19, 31.5MB/s]      1%|▌                                     | 8.15M/611M [00:00<00:16, 35.4MB/s]      2%|▋                                     | 11.7M/611M [00:00<00:32, 18.3MB/s]      2%|▉                                     | 14.2M/611M [00:00<00:37, 15.8MB/s]      3%|█                                     | 16.2M/611M [00:00<00:38, 15.5MB/s]      3%|█                                     | 18.0M/611M [00:01<00:40, 14.5MB/s]      3%|█▏                                    | 19.5M/611M [00:01<00:41, 14.2MB/s]      3%|█▎                                    | 21.0M/611M [00:01<00:48, 12.3MB/s]      4%|█▌                                    | 25.8M/611M [00:01<00:29, 20.1MB/s]      5%|█▉                                    | 31.6M/611M [00:01<00:19, 29.1MB/s]      6%|██▎                                   | 37.4M/611M [00:01<00:15, 36.5MB/s]      7%|██▋                                   | 43.4M/611M [00:01<00:13, 42.9MB/s]      8%|███                                   | 49.5M/611M [00:01<00:11, 47.8MB/s]      9%|███▍                                  | 55.6M/611M [00:01<00:10, 51.5MB/s]     10%|███▊                                  | 61.7M/611M [00:02<00:10, 54.2MB/s]     11%|████▏                                 | 67.7M/611M [00:02<00:09, 56.1MB/s]     12%|████▌                                 | 73.8M/611M [00:02<00:09, 57.6MB/s]     13%|████▉                                 | 79.7M/611M [00:02<00:09, 58.0MB/s]     14%|█████▎                                | 85.8M/611M [00:02<00:08, 58.9MB/s]     15%|█████▋                                | 91.9M/611M [00:02<00:08, 59.4MB/s]     16%|██████                                | 98.0M/611M [00:02<00:08, 59.8MB/s]     17%|██████▋                                | 104M/611M [00:02<00:08, 60.2MB/s]     18%|███████                                | 110M/611M [00:02<00:08, 60.5MB/s]     19%|███████▍                               | 116M/611M [00:02<00:08, 60.6MB/s]     20%|███████▊                               | 122M/611M [00:03<00:08, 60.8MB/s]     21%|████████▏                              | 129M/611M [00:03<00:07, 60.9MB/s]     22%|████████▌                              | 135M/611M [00:03<00:07, 60.8MB/s]     23%|████████▉                              | 141M/611M [00:03<00:13, 34.5MB/s]     24%|█████████▎                             | 145M/611M [00:04<00:25, 18.6MB/s]     25%|█████████▋                             | 151M/611M [00:04<00:20, 22.7MB/s]     25%|█████████▉                             | 155M/611M [00:04<00:17, 26.3MB/s]     26%|██████████▎                            | 161M/611M [00:04<00:14, 31.7MB/s]     27%|██████████▋                            | 167M/611M [00:04<00:12, 36.8MB/s]     28%|███████████                            | 173M/611M [00:04<00:10, 41.8MB/s]     29%|███████████▎                           | 178M/611M [00:05<00:15, 27.5MB/s]     30%|███████████▋                           | 182M/611M [00:05<00:14, 29.7MB/s]     31%|███████████▉                           | 186M/611M [00:05<00:13, 30.6MB/s]     31%|████████████▏                          | 192M/611M [00:05<00:11, 35.2MB/s]     32%|████████████▌                          | 197M/611M [00:05<00:10, 40.5MB/s]     33%|████████████▉                          | 203M/611M [00:05<00:09, 41.7MB/s]     34%|█████████████▏                         | 207M/611M [00:06<00:17, 22.6MB/s]     35%|█████████████▍                         | 211M/611M [00:06<00:25, 15.8MB/s]     35%|█████████████▋                         | 214M/611M [00:06<00:28, 13.7MB/s]     35%|█████████████▊                         | 216M/611M [00:07<00:36, 10.9MB/s]     36%|██████████████▏                        | 221M/611M [00:07<00:24, 15.9MB/s]     37%|██████████████▍                        | 226M/611M [00:07<00:18, 21.3MB/s]     38%|██████████████▊                        | 232M/611M [00:07<00:13, 27.5MB/s]     39%|███████████████▏                       | 238M/611M [00:07<00:11, 33.5MB/s]     40%|███████████████▌                       | 244M/611M [00:07<00:09, 38.9MB/s]     41%|███████████████▉                       | 250M/611M [00:07<00:08, 43.5MB/s]     42%|████████████████▎                      | 256M/611M [00:07<00:07, 47.2MB/s]     43%|████████████████▋                      | 261M/611M [00:07<00:06, 50.3MB/s]     44%|█████████████████                      | 267M/611M [00:08<00:06, 52.9MB/s]     45%|█████████████████▍                     | 273M/611M [00:08<00:06, 54.7MB/s]     46%|█████████████████▊                     | 279M/611M [00:08<00:05, 55.7MB/s]     47%|██████████████████▏                    | 285M/611M [00:08<00:05, 56.5MB/s]     48%|██████████████████▌                    | 291M/611M [00:08<00:08, 36.5MB/s]     48%|██████████████████▊                    | 295M/611M [00:08<00:08, 37.9MB/s]     49%|███████████████████▏                   | 301M/611M [00:08<00:07, 41.1MB/s]     50%|███████████████████▌                   | 306M/611M [00:08<00:06, 45.2MB/s]     51%|███████████████████▉                   | 312M/611M [00:09<00:06, 48.5MB/s]     52%|████████████████████▎                  | 318M/611M [00:09<00:05, 51.0MB/s]     53%|████████████████████▋                  | 324M/611M [00:09<00:05, 53.8MB/s]     54%|█████████████████████                  | 330M/611M [00:09<00:11, 23.7MB/s]     55%|█████████████████████▎                 | 334M/611M [00:10<00:16, 16.9MB/s]     55%|█████████████████████▌                 | 337M/611M [00:10<00:21, 12.7MB/s]     56%|█████████████████████▉                 | 342M/611M [00:10<00:15, 17.0MB/s]     57%|██████████████████████▏                | 348M/611M [00:11<00:12, 21.6MB/s]     58%|██████████████████████▌                | 353M/611M [00:11<00:09, 27.1MB/s]     59%|██████████████████████▉                | 359M/611M [00:11<00:07, 32.6MB/s]     60%|███████████████████████▎               | 365M/611M [00:11<00:06, 38.2MB/s]     61%|███████████████████████▋               | 371M/611M [00:11<00:05, 42.4MB/s]     62%|████████████████████████               | 377M/611M [00:11<00:04, 46.8MB/s]     63%|████████████████████████▍              | 383M/611M [00:11<00:04, 50.2MB/s]     64%|████████████████████████▊              | 389M/611M [00:11<00:04, 52.4MB/s]     65%|█████████████████████████▏             | 395M/611M [00:11<00:03, 54.5MB/s]     66%|█████████████████████████▌             | 401M/611M [00:11<00:03, 56.1MB/s]     67%|█████████████████████████▉             | 407M/611M [00:12<00:03, 57.4MB/s]     68%|██████████████████████████▎            | 413M/611M [00:12<00:03, 58.2MB/s]     69%|██████████████████████████▋            | 419M/611M [00:12<00:03, 58.9MB/s]     70%|███████████████████████████▏           | 425M/611M [00:12<00:03, 59.3MB/s]     71%|███████████████████████████▌           | 431M/611M [00:12<00:03, 59.6MB/s]     72%|███████████████████████████▉           | 437M/611M [00:12<00:02, 59.9MB/s]     73%|████████████████████████████▎          | 443M/611M [00:12<00:02, 60.1MB/s]     74%|████████████████████████████▋          | 449M/611M [00:12<00:02, 60.3MB/s]     75%|█████████████████████████████          | 455M/611M [00:12<00:02, 60.5MB/s]     76%|█████████████████████████████▍         | 461M/611M [00:12<00:02, 60.5MB/s]     77%|█████████████████████████████▊         | 467M/611M [00:13<00:02, 60.8MB/s]     78%|██████████████████████████████▏        | 473M/611M [00:13<00:03, 34.7MB/s]     78%|██████████████████████████████▌        | 478M/611M [00:13<00:05, 22.2MB/s]     79%|██████████████████████████████▉        | 483M/611M [00:13<00:04, 26.6MB/s]     80%|███████████████████████████████▎       | 489M/611M [00:14<00:03, 31.9MB/s]     81%|███████████████████████████████▌       | 495M/611M [00:14<00:03, 36.8MB/s]     82%|████████████████████████████████       | 501M/611M [00:14<00:02, 42.0MB/s]     83%|████████████████████████████████▎      | 506M/611M [00:14<00:03, 31.6MB/s]     84%|████████████████████████████████▋      | 512M/611M [00:14<00:02, 36.2MB/s]     85%|█████████████████████████████████      | 517M/611M [00:14<00:02, 39.5MB/s]     86%|█████████████████████████████████▎     | 522M/611M [00:14<00:02, 43.1MB/s]     87%|█████████████████████████████████▋     | 528M/611M [00:14<00:01, 46.6MB/s]     87%|██████████████████████████████████     | 533M/611M [00:15<00:03, 25.3MB/s]     88%|██████████████████████████████████▎    | 537M/611M [00:15<00:04, 18.2MB/s]     89%|██████████████████████████████████▌    | 540M/611M [00:16<00:04, 14.5MB/s]     89%|██████████████████████████████████▋    | 543M/611M [00:16<00:05, 12.0MB/s]     89%|██████████████████████████████████▊    | 545M/611M [00:16<00:05, 12.8MB/s]     90%|██████████████████████████████████▉    | 547M/611M [00:16<00:04, 13.6MB/s]     90%|███████████████████████████████████▏   | 550M/611M [00:16<00:03, 17.5MB/s]     91%|███████████████████████████████████▍   | 554M/611M [00:16<00:02, 21.0MB/s]     91%|███████████████████████████████████▋   | 558M/611M [00:16<00:02, 24.8MB/s]     92%|███████████████████████████████████▉   | 562M/611M [00:17<00:01, 28.4MB/s]     93%|████████████████████████████████████   | 565M/611M [00:17<00:02, 20.0MB/s]     94%|████████████████████████████████████▌  | 571M/611M [00:17<00:01, 28.1MB/s]     95%|████████████████████████████████████▉  | 578M/611M [00:17<00:00, 35.7MB/s]     96%|█████████████████████████████████████▎ | 584M/611M [00:17<00:00, 42.7MB/s]     97%|█████████████████████████████████████▊ | 591M/611M [00:17<00:00, 48.8MB/s]     98%|██████████████████████████████████████▏| 598M/611M [00:17<00:00, 53.7MB/s]     99%|██████████████████████████████████████▌| 604M/611M [00:17<00:00, 57.5MB/s]      0%|                                               | 0.00/611M [00:00<?, ?B/s]    100%|████████████████████████████████████████| 611M/611M [00:00<00:00, 921GB/s]
    Attempting to create new mne-python configuration file:
    /github/home/.mne/mne-python.json
    Opening raw data file /github/home/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_meg.fif...
        Range : 237600 ... 506999 =    791.189 ...  1688.266 secs
    Ready.
    Reading 0 ... 269399  =      0.000 ...   897.077 secs...
    Setting up band-stop filter

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandstop filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower transition bandwidth: 0.50 Hz
    - Upper transition bandwidth: 0.50 Hz
    - Filter length: 1983 samples (6.603 sec)

    Filtering raw data in 1 contiguous segment
    Setting up high-pass filter at 2 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal highpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 2.00
    - Lower transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 1.00 Hz)
    - Filter length: 497 samples (1.655 sec)

    111 events found
    Event IDs: [1]
    Not setting metadata
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-3.9992341833870637, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Loading data for 111 events and 1202 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    5 bad epochs dropped
    Computing rank from data with rank=None
        Using tolerance 7.5e-09 (2.2e-16 eps * 204 dim * 1.7e+05  max singular value)
        Estimated rank (grad): 204
        GRAD: rank 204 computed from 204 data channels with 0 projectors
    /github/workspace/alphacsc/datasets/mne_data.py:94: RuntimeWarning: Something went wrong in the data-driven estimation of the data rank as it exceeds the theoretical rank from the info (204 > 64). Consider setting rank to "auto" or setting it explicitly as an integer.
      cov = mne.compute_covariance(epochs_cov)
    Reducing data rank from 204 -> 204
    Estimating covariance using EMPIRICAL
    Done.
    Number of samples used : 127412
    [done]
    Not setting metadata
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-2.001282051803185, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Loading data for 111 events and 1803 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    8 bad epochs dropped
    /github/workspace/alphacsc/datasets/mne_data.py:129: DeprecationWarning: events cannot be set directly. This warning will turn into an error after 0.24
      info['events'] = events
    /github/workspace/alphacsc/datasets/mne_data.py:130: DeprecationWarning: Info does not support directly setting the key 'event_id', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      info['event_id'] = event_id
    /github/workspace/alphacsc/datasets/mne_data.py:131: DeprecationWarning: Info does not support directly setting the key 'subject', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      info['subject'] = dataset
    /github/workspace/alphacsc/datasets/mne_data.py:132: DeprecationWarning: Info does not support directly setting the key 'subjects_dir', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      info['subjects_dir'] = subjects_dir
    /github/workspace/alphacsc/datasets/mne_data.py:134: DeprecationWarning: Info does not support directly setting the key 'cov', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      info['cov'] = cov
    /github/workspace/alphacsc/datasets/mne_data.py:135: DeprecationWarning: Info does not support directly setting the key 'file_bem', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      info['file_bem'] = file_bem
    /github/workspace/alphacsc/datasets/mne_data.py:136: DeprecationWarning: Info does not support directly setting the key 'file_trans', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      info['file_trans'] = file_trans




.. GENERATED FROM PYTHON SOURCE LINES 67-68

Fit the model and learn rank1 atoms

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    cdl.fit(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ..............
    [BatchCDL] Converged after 14 iteration, (dz, du) = 8.570e-05, 8.726e-05
    [BatchCDL] Fit in 567.7s

    <alphacsc.convolutional_dictionary_learning.BatchCDL object at 0x7f44ec71b8e0>



.. GENERATED FROM PYTHON SOURCE LINES 71-73

Display the 4-th atom, which displays a :math:`\mu`-waveform in its temporal
pattern.

.. GENERATED FROM PYTHON SOURCE LINES 73-108

.. code-block:: default


    import mne
    import numpy as np
    import matplotlib.pyplot as plt

    i_atom = 4
    n_plots = 3
    figsize = (n_plots * 5, 5.5)
    fig, axes = plt.subplots(1, n_plots, figsize=figsize, squeeze=False)

    # Plot the spatial map of the learn atom using mne topomap
    ax = axes[0, 0]
    u_hat = cdl.u_hat_[i_atom]
    mne.viz.plot_topomap(u_hat, info, axes=ax, show=False)
    ax.set(title='Learned spatial pattern')

    # Plot the temporal pattern of the learn atom
    ax = axes[0, 1]
    v_hat = cdl.v_hat_[i_atom]
    t = np.arange(v_hat.size) / sfreq
    ax.plot(t, v_hat)
    ax.set(xlabel='Time (sec)', title='Learned temporal waveform')
    ax.grid(True)

    # Plot the psd of the time atom
    ax = axes[0, 2]
    psd = np.abs(np.fft.rfft(v_hat)) ** 2
    frequencies = np.linspace(0, sfreq / 2.0, len(psd))
    ax.semilogy(frequencies, psd)
    ax.set(xlabel='Frequencies (Hz)', title='Power Spectral Density')
    ax.grid(True)
    ax.set_xlim(0, 30)

    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :alt: Learned spatial pattern, Learned temporal waveform, Power Spectral Density
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'event_id', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)
    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'subject', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)
    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'subjects_dir', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)
    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'cov', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)
    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'file_bem', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)
    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'file_trans', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)
    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'event_id', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)
    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'subject', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)
    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'subjects_dir', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)
    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'cov', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)
    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'file_bem', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)
    /usr/local/lib/python3.9/copy.py:153: DeprecationWarning: Info does not support directly setting the key 'file_trans', this warning will turn into an error after 0.24. You can set info['temp'] to store temporary objects in an Info instance, but these will not survive an I/O round-trip.
      y = copier(memo)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 10 minutes  12.043 seconds)


.. _sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_somato_mu_waves.py <plot_somato_mu_waves.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_somato_mu_waves.ipynb <plot_somato_mu_waves.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

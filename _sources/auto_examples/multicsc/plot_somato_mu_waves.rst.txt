
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multicsc/plot_somato_mu_waves.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multicsc_plot_somato_mu_waves.py:


===========================================================
Extracting :math:`\mu`-wave from the somato-sensory dataset
===========================================================

This example illustrates how to learn rank-1 atoms [1]_ on the multivariate
somato-sensorymotor dataset from :code:`mne`. The displayed results highlight
the presence of :math:`\mu`-waves located in the SI cortex.

.. [1] Dupré La Tour, T., Moreau, T., Jas, M., & Gramfort, A. (2018).
    `Multivariate Convolutional Sparse Coding for Electromagnetic Brain Signals
    <https://arxiv.org/abs/1805.09654v2>`_. Advances in Neural Information
    Processing Systems (NIPS).

.. GENERATED FROM PYTHON SOURCE LINES 15-23

.. code-block:: default


    # Authors: Thomas Moreau <thomas.moreau@inria.fr>
    #          Mainak Jas <mainak.jas@telecom-paristech.fr>
    #          Tom Dupre La Tour <tom.duprelatour@telecom-paristech.fr>
    #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Let us first define the parameters of our model.

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default


    sfreq = 150.

    # Define the shape of the dictionary
    n_atoms = 25
    n_times_atom = int(round(sfreq * 1.0))  # 1000. ms








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Next, we define the parameters for multivariate CSC

.. GENERATED FROM PYTHON SOURCE LINES 34-56

.. code-block:: default


    from alphacsc import BatchCDL
    cdl = BatchCDL(
        # Shape of the dictionary
        n_atoms=n_atoms,
        n_times_atom=n_times_atom,
        # Request a rank1 dictionary with unit norm temporal and spatial maps
        rank1=True, uv_constraint='separate',
        # Initialize the dictionary with random chunk from the data
        D_init='chunk',
        # rescale the regularization parameter to be 20% of lambda_max
        lmbd_max="scaled", reg=.2,
        # Number of iteration for the alternate minimization and cvg threshold
        n_iter=100, eps=1e-4,
        # solver for the z-step
        solver_z="lgcd", solver_z_kwargs={'tol': 1e-2, 'max_iter': 1000},
        # solver for the d-step
        solver_d='alternate_adaptive', solver_d_kwargs={'max_iter': 300},
        # Technical parameters
        verbose=1, random_state=0, n_jobs=6)









.. GENERATED FROM PYTHON SOURCE LINES 57-60

Here, we load the data from the somato-sensory dataset and preprocess them
in epochs. The epochs are selected around the stim, starting 2 seconds
before and finishing 4 seconds after.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default


    from alphacsc.datasets.mne_data import load_data
    t_lim = (-2, 4)
    X, info = load_data(dataset='somato', epoch=t_lim, sfreq=sfreq)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for somato...
      0%|                                               | 0.00/611M [00:00<?, ?B/s]      0%|▏                                     | 3.01M/611M [00:00<00:20, 30.1MB/s]      1%|▌                                     | 9.08M/611M [00:00<00:12, 48.1MB/s]      3%|▉                                     | 15.6M/611M [00:00<00:10, 55.7MB/s]      4%|█▎                                    | 22.1M/611M [00:00<00:09, 59.4MB/s]      5%|█▊                                    | 28.4M/611M [00:00<00:09, 60.9MB/s]      6%|██▏                                   | 34.5M/611M [00:00<00:09, 59.9MB/s]      7%|██▌                                   | 40.9M/611M [00:00<00:09, 61.2MB/s]      8%|██▉                                   | 47.6M/611M [00:00<00:08, 63.1MB/s]      9%|███▍                                  | 54.4M/611M [00:00<00:08, 64.5MB/s]     10%|███▊                                  | 61.1M/611M [00:01<00:08, 65.5MB/s]     11%|████▏                                 | 67.9M/611M [00:01<00:08, 66.0MB/s]     12%|████▋                                 | 74.7M/611M [00:01<00:08, 66.6MB/s]     13%|█████                                 | 81.5M/611M [00:01<00:07, 67.1MB/s]     14%|█████▍                                | 88.3M/611M [00:01<00:07, 67.4MB/s]     16%|█████▉                                | 95.1M/611M [00:01<00:07, 67.7MB/s]     17%|██████▌                                | 102M/611M [00:01<00:07, 67.7MB/s]     18%|██████▉                                | 109M/611M [00:01<00:07, 67.8MB/s]     19%|███████▍                               | 116M/611M [00:01<00:07, 67.9MB/s]     20%|███████▊                               | 122M/611M [00:01<00:07, 68.1MB/s]     21%|████████▎                              | 129M/611M [00:02<00:07, 68.1MB/s]     22%|████████▋                              | 136M/611M [00:02<00:06, 68.1MB/s]     23%|█████████▏                             | 143M/611M [00:02<00:06, 68.5MB/s]     25%|█████████▌                             | 150M/611M [00:02<00:06, 68.2MB/s]     26%|██████████                             | 157M/611M [00:02<00:06, 68.2MB/s]     27%|██████████▍                            | 163M/611M [00:02<00:06, 68.2MB/s]     28%|██████████▉                            | 170M/611M [00:02<00:06, 68.1MB/s]     29%|███████████▎                           | 177M/611M [00:02<00:06, 68.1MB/s]     30%|███████████▋                           | 184M/611M [00:02<00:06, 68.1MB/s]     31%|████████████▏                          | 191M/611M [00:02<00:06, 67.9MB/s]     32%|████████████▌                          | 198M/611M [00:03<00:06, 67.9MB/s]     33%|█████████████                          | 204M/611M [00:03<00:05, 68.0MB/s]     35%|█████████████▍                         | 211M/611M [00:03<00:05, 67.8MB/s]     36%|█████████████▉                         | 218M/611M [00:03<00:05, 67.7MB/s]     37%|██████████████▎                        | 225M/611M [00:03<00:05, 67.7MB/s]     38%|██████████████▊                        | 231M/611M [00:03<00:05, 67.8MB/s]     39%|███████████████▏                       | 238M/611M [00:03<00:06, 61.0MB/s]     40%|███████████████▋                       | 245M/611M [00:03<00:05, 62.2MB/s]     41%|████████████████                       | 252M/611M [00:03<00:05, 63.6MB/s]     42%|████████████████▍                      | 258M/611M [00:03<00:05, 64.7MB/s]     43%|████████████████▉                      | 265M/611M [00:04<00:05, 65.8MB/s]     45%|█████████████████▎                     | 272M/611M [00:04<00:05, 66.6MB/s]     46%|█████████████████▊                     | 279M/611M [00:04<00:05, 66.0MB/s]     47%|██████████████████▏                    | 285M/611M [00:04<00:04, 66.4MB/s]     48%|██████████████████▋                    | 292M/611M [00:04<00:04, 66.7MB/s]     49%|███████████████████                    | 299M/611M [00:04<00:04, 66.9MB/s]     50%|███████████████████▌                   | 306M/611M [00:04<00:04, 67.3MB/s]     51%|███████████████████▉                   | 312M/611M [00:04<00:04, 67.5MB/s]     52%|████████████████████▍                  | 319M/611M [00:04<00:04, 67.8MB/s]     53%|████████████████████▊                  | 326M/611M [00:04<00:04, 68.0MB/s]     55%|█████████████████████▎                 | 333M/611M [00:05<00:04, 68.0MB/s]     56%|█████████████████████▋                 | 340M/611M [00:05<00:03, 68.1MB/s]     57%|██████████████████████▏                | 347M/611M [00:05<00:03, 68.2MB/s]     58%|██████████████████████▌                | 353M/611M [00:05<00:03, 68.2MB/s]     59%|███████████████████████                | 360M/611M [00:05<00:03, 68.0MB/s]     60%|███████████████████████▍               | 367M/611M [00:05<00:03, 67.9MB/s]     61%|███████████████████████▉               | 374M/611M [00:05<00:03, 68.0MB/s]     62%|████████████████████████▎              | 381M/611M [00:05<00:03, 67.9MB/s]     63%|████████████████████████▊              | 388M/611M [00:05<00:03, 67.9MB/s]     65%|█████████████████████████▏             | 394M/611M [00:05<00:03, 68.3MB/s]     66%|█████████████████████████▋             | 401M/611M [00:06<00:03, 68.1MB/s]     67%|██████████████████████████             | 408M/611M [00:06<00:03, 54.4MB/s]     68%|██████████████████████████▍            | 414M/611M [00:06<00:03, 56.1MB/s]     69%|██████████████████████████▉            | 421M/611M [00:06<00:03, 58.9MB/s]     70%|███████████████████████████▎           | 428M/611M [00:06<00:02, 61.4MB/s]     71%|███████████████████████████▊           | 434M/611M [00:06<00:02, 63.1MB/s]     72%|████████████████████████████▏          | 441M/611M [00:06<00:02, 64.2MB/s]     73%|████████████████████████████▌          | 448M/611M [00:06<00:02, 65.2MB/s]     74%|█████████████████████████████          | 455M/611M [00:06<00:02, 66.0MB/s]     76%|█████████████████████████████▍         | 461M/611M [00:07<00:02, 66.5MB/s]     77%|█████████████████████████████▉         | 468M/611M [00:07<00:02, 66.9MB/s]     78%|██████████████████████████████▎        | 475M/611M [00:07<00:02, 67.0MB/s]     79%|██████████████████████████████▊        | 482M/611M [00:07<00:01, 67.0MB/s]     80%|███████████████████████████████▏       | 488M/611M [00:07<00:01, 67.0MB/s]     81%|███████████████████████████████▋       | 495M/611M [00:07<00:01, 67.0MB/s]     82%|████████████████████████████████       | 502M/611M [00:07<00:01, 66.5MB/s]     83%|████████████████████████████████▍      | 509M/611M [00:07<00:01, 66.7MB/s]     84%|████████████████████████████████▉      | 515M/611M [00:07<00:01, 66.8MB/s]     85%|█████████████████████████████████▎     | 522M/611M [00:07<00:01, 66.9MB/s]     87%|█████████████████████████████████▊     | 529M/611M [00:08<00:01, 67.2MB/s]     88%|██████████████████████████████████▏    | 536M/611M [00:08<00:01, 67.5MB/s]     89%|██████████████████████████████████▋    | 542M/611M [00:08<00:01, 67.6MB/s]     90%|███████████████████████████████████    | 549M/611M [00:08<00:00, 67.6MB/s]     91%|███████████████████████████████████▌   | 556M/611M [00:08<00:00, 67.7MB/s]     92%|███████████████████████████████████▉   | 563M/611M [00:08<00:00, 67.6MB/s]     93%|████████████████████████████████████▍  | 569M/611M [00:08<00:00, 67.4MB/s]     94%|████████████████████████████████████▊  | 576M/611M [00:08<00:00, 67.4MB/s]     95%|█████████████████████████████████████▏ | 583M/611M [00:08<00:00, 67.5MB/s]     97%|█████████████████████████████████████▋ | 590M/611M [00:08<00:00, 67.4MB/s]     98%|██████████████████████████████████████ | 597M/611M [00:09<00:00, 67.7MB/s]     99%|██████████████████████████████████████▌| 603M/611M [00:09<00:00, 67.2MB/s]    100%|██████████████████████████████████████▉| 610M/611M [00:09<00:00, 67.0MB/s]      0%|                                               | 0.00/611M [00:00<?, ?B/s]    100%|███████████████████████████████████████| 611M/611M [00:00<00:00, 1.64TB/s]
    Attempting to create new mne-python configuration file:
    /github/home/.mne/mne-python.json
    Opening raw data file /github/home/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_meg.fif...
        Range : 237600 ... 506999 =    791.189 ...  1688.266 secs
    Ready.
    Reading 0 ... 269399  =      0.000 ...   897.077 secs...
    Setting up band-stop filter

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandstop filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower transition bandwidth: 0.50 Hz
    - Upper transition bandwidth: 0.50 Hz
    - Filter length: 1983 samples (6.603 sec)

    Filtering raw data in 1 contiguous segment
    Setting up high-pass filter at 2 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal highpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 2.00
    - Lower transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 1.00 Hz)
    - Filter length: 497 samples (1.655 sec)

    111 events found
    Event IDs: [1]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-3.9992341833870637, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1202 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    5 bad epochs dropped
    Computing rank from data with rank=None
        Using tolerance 7.5e-09 (2.2e-16 eps * 204 dim * 1.7e+05  max singular value)
        Estimated rank (grad): 204
        GRAD: rank 204 computed from 204 data channels with 0 projectors
    /github/workspace/alphacsc/datasets/mne_data.py:94: RuntimeWarning: Something went wrong in the data-driven estimation of the data rank as it exceeds the theoretical rank from the info (204 > 64). Consider setting rank to "auto" or setting it explicitly as an integer.
      cov = mne.compute_covariance(epochs_cov)
    Reducing data rank from 204 -> 204
    Estimating covariance using EMPIRICAL
    Done.
    Number of samples used : 127412
    [done]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-2.001282051803185, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1803 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    8 bad epochs dropped




.. GENERATED FROM PYTHON SOURCE LINES 67-68

Fit the model and learn rank1 atoms

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    cdl.fit(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ./github/workspace/alphacsc/utils/optim.py:136: DeprecationWarning: Please use `scalar_search_armijo` from the `scipy.optimize` namespace, the `scipy.optimize.linesearch` namespace is deprecated.
      step_size, obj_uv = optimize.linesearch.scalar_search_armijo(
    .............
    [BatchCDL] Converged after 14 iteration, (dz, du) = 8.570e-05, 8.726e-05
    [BatchCDL] Fit in 806.7s

    <alphacsc.convolutional_dictionary_learning.BatchCDL object at 0x7f3af0055c40>



.. GENERATED FROM PYTHON SOURCE LINES 71-73

Display the 4-th atom, which displays a :math:`\mu`-waveform in its temporal
pattern.

.. GENERATED FROM PYTHON SOURCE LINES 73-108

.. code-block:: default


    import mne
    import numpy as np
    import matplotlib.pyplot as plt

    i_atom = 4
    n_plots = 3
    figsize = (n_plots * 5, 5.5)
    fig, axes = plt.subplots(1, n_plots, figsize=figsize, squeeze=False)

    # Plot the spatial map of the learn atom using mne topomap
    ax = axes[0, 0]
    u_hat = cdl.u_hat_[i_atom]
    mne.viz.plot_topomap(u_hat, info, axes=ax, show=False)
    ax.set(title='Learned spatial pattern')

    # Plot the temporal pattern of the learn atom
    ax = axes[0, 1]
    v_hat = cdl.v_hat_[i_atom]
    t = np.arange(v_hat.size) / sfreq
    ax.plot(t, v_hat)
    ax.set(xlabel='Time (sec)', title='Learned temporal waveform')
    ax.grid(True)

    # Plot the psd of the time atom
    ax = axes[0, 2]
    psd = np.abs(np.fft.rfft(v_hat)) ** 2
    frequencies = np.linspace(0, sfreq / 2.0, len(psd))
    ax.semilogy(frequencies, psd)
    ax.set(xlabel='Frequencies (Hz)', title='Power Spectral Density')
    ax.grid(True)
    ax.set_xlim(0, 30)

    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :alt: Learned spatial pattern, Learned temporal waveform, Power Spectral Density
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 13 minutes  59.356 seconds)


.. _sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_somato_mu_waves.py <plot_somato_mu_waves.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_somato_mu_waves.ipynb <plot_somato_mu_waves.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

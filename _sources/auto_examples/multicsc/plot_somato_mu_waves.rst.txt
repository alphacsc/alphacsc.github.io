
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multicsc/plot_somato_mu_waves.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multicsc_plot_somato_mu_waves.py:


===========================================================
Extracting :math:`\mu`-wave from the somato-sensory dataset
===========================================================

This example illustrates how to learn rank-1 atoms [1]_ on the multivariate
somato-sensorymotor dataset from :code:`mne`. The displayed results highlight
the presence of :math:`\mu`-waves located in the SI cortex.

.. [1] Dupré La Tour, T., Moreau, T., Jas, M., & Gramfort, A. (2018).
    `Multivariate Convolutional Sparse Coding for Electromagnetic Brain Signals
    <https://arxiv.org/abs/1805.09654v2>`_. Advances in Neural Information
    Processing Systems (NIPS).

.. GENERATED FROM PYTHON SOURCE LINES 15-23

.. code-block:: default


    # Authors: Thomas Moreau <thomas.moreau@inria.fr>
    #          Mainak Jas <mainak.jas@telecom-paristech.fr>
    #          Tom Dupre La Tour <tom.duprelatour@telecom-paristech.fr>
    #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Let us first define the parameters of our model.

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default


    sfreq = 150.

    # Define the shape of the dictionary
    n_atoms = 25
    n_times_atom = int(round(sfreq * 1.0))  # 1000. ms








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Next, we define the parameters for multivariate CSC

.. GENERATED FROM PYTHON SOURCE LINES 34-56

.. code-block:: default


    from alphacsc import BatchCDL
    cdl = BatchCDL(
        # Shape of the dictionary
        n_atoms=n_atoms,
        n_times_atom=n_times_atom,
        # Request a rank1 dictionary with unit norm temporal and spatial maps
        rank1=True, uv_constraint='separate',
        # Initialize the dictionary with random chunk from the data
        D_init='chunk',
        # rescale the regularization parameter to be 20% of lambda_max
        lmbd_max="scaled", reg=.2,
        # Number of iteration for the alternate minimization and cvg threshold
        n_iter=100, eps=1e-4,
        # solver for the z-step
        solver_z="lgcd", solver_z_kwargs={'tol': 1e-2, 'max_iter': 1000},
        # solver for the d-step
        solver_d='alternate_adaptive', solver_d_kwargs={'max_iter': 300},
        # Technical parameters
        verbose=1, random_state=0, n_jobs=6)









.. GENERATED FROM PYTHON SOURCE LINES 57-60

Here, we load the data from the somato-sensory dataset and preprocess them
in epochs. The epochs are selected around the stim, starting 2 seconds
before and finishing 4 seconds after.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default


    from alphacsc.datasets.mne_data import load_data
    t_lim = (-2, 4)
    X, info = load_data(dataset='somato', epoch=t_lim, sfreq=sfreq)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for somato...
      0%|                                               | 0.00/611M [00:00<?, ?B/s]      1%|▏                                     | 3.19M/611M [00:00<00:19, 31.9MB/s]      1%|▍                                     | 6.38M/611M [00:00<00:18, 31.8MB/s]      2%|▋                                     | 11.9M/611M [00:00<00:14, 42.5MB/s]      3%|█                                     | 16.2M/611M [00:00<00:21, 28.1MB/s]      4%|█▍                                    | 22.8M/611M [00:00<00:15, 38.5MB/s]      4%|█▋                                    | 27.3M/611M [00:00<00:15, 38.8MB/s]      5%|██                                    | 32.5M/611M [00:00<00:13, 41.8MB/s]      6%|██▎                                   | 37.0M/611M [00:01<00:19, 29.5MB/s]      7%|██▋                                   | 43.5M/611M [00:01<00:15, 37.2MB/s]      8%|██▉                                   | 48.0M/611M [00:01<00:14, 38.7MB/s]      9%|███▎                                  | 52.5M/611M [00:01<00:20, 27.5MB/s]      9%|███▍                                  | 56.0M/611M [00:01<00:22, 24.8MB/s]     10%|███▋                                  | 59.1M/611M [00:01<00:23, 23.1MB/s]     10%|███▊                                  | 61.8M/611M [00:02<00:25, 21.7MB/s]     11%|████                                  | 64.5M/611M [00:02<00:23, 22.8MB/s]     11%|████▏                                 | 68.3M/611M [00:02<00:22, 24.2MB/s]     12%|████▍                                 | 70.9M/611M [00:02<00:22, 24.5MB/s]     12%|████▌                                 | 73.4M/611M [00:02<00:22, 23.6MB/s]     12%|████▋                                 | 76.1M/611M [00:02<00:22, 23.6MB/s]     13%|█████                                 | 80.4M/611M [00:02<00:18, 28.5MB/s]     14%|█████▏                                | 84.0M/611M [00:02<00:17, 29.5MB/s]     14%|█████▍                                | 87.0M/611M [00:02<00:18, 28.6MB/s]     15%|█████▌                                | 89.9M/611M [00:03<00:23, 22.2MB/s]     15%|█████▊                                | 92.4M/611M [00:03<00:33, 15.7MB/s]     15%|█████▊                                | 94.4M/611M [00:03<00:31, 16.3MB/s]     16%|█████▉                                | 96.3M/611M [00:03<00:31, 16.6MB/s]     16%|██████▏                               | 98.5M/611M [00:03<00:28, 17.8MB/s]     17%|██████▍                                | 101M/611M [00:03<00:26, 19.4MB/s]     17%|██████▋                                | 104M/611M [00:04<00:22, 22.8MB/s]     18%|██████▊                                | 107M/611M [00:04<00:19, 25.4MB/s]     18%|███████                                | 110M/611M [00:04<00:19, 25.6MB/s]     18%|███████▏                               | 113M/611M [00:04<00:22, 22.5MB/s]     19%|███████▎                               | 115M/611M [00:04<00:21, 22.7MB/s]     19%|███████▌                               | 118M/611M [00:04<00:25, 19.1MB/s]     20%|███████▋                               | 120M/611M [00:04<00:31, 15.5MB/s]     20%|███████▊                               | 121M/611M [00:04<00:30, 15.9MB/s]     20%|███████▊                               | 123M/611M [00:05<00:30, 16.0MB/s]     21%|████████                               | 126M/611M [00:05<00:27, 17.6MB/s]     21%|████████▏                              | 128M/611M [00:05<00:26, 18.1MB/s]     21%|████████▎                              | 131M/611M [00:05<00:21, 22.2MB/s]     22%|████████▌                              | 134M/611M [00:05<00:20, 23.8MB/s]     22%|████████▊                              | 137M/611M [00:05<00:17, 26.4MB/s]     23%|████████▉                              | 140M/611M [00:05<00:18, 25.1MB/s]     23%|█████████                              | 143M/611M [00:05<00:26, 17.9MB/s]     24%|█████████▏                             | 145M/611M [00:06<00:35, 13.3MB/s]     24%|█████████▎                             | 146M/611M [00:06<00:39, 11.9MB/s]     24%|█████████▍                             | 148M/611M [00:06<00:37, 12.3MB/s]     25%|█████████▌                             | 150M/611M [00:06<00:34, 13.3MB/s]     25%|█████████▋                             | 152M/611M [00:06<00:30, 15.0MB/s]     25%|█████████▊                             | 154M/611M [00:06<00:28, 15.8MB/s]     26%|██████████                             | 158M/611M [00:06<00:20, 21.6MB/s]     27%|██████████▎                            | 162M/611M [00:07<00:15, 28.0MB/s]     27%|██████████▋                            | 168M/611M [00:07<00:12, 35.3MB/s]     28%|███████████                            | 174M/611M [00:07<00:10, 41.8MB/s]     29%|███████████▍                           | 179M/611M [00:07<00:09, 45.0MB/s]     30%|███████████▋                           | 184M/611M [00:07<00:09, 46.4MB/s]     31%|████████████                           | 189M/611M [00:07<00:08, 46.9MB/s]     32%|████████████▍                          | 195M/611M [00:07<00:08, 50.8MB/s]     33%|████████████▊                          | 200M/611M [00:07<00:08, 51.0MB/s]     34%|█████████████▏                         | 206M/611M [00:07<00:07, 53.8MB/s]     35%|█████████████▍                         | 211M/611M [00:08<00:09, 42.7MB/s]     35%|█████████████▊                         | 216M/611M [00:08<00:12, 30.7MB/s]     36%|██████████████                         | 220M/611M [00:08<00:14, 27.0MB/s]     37%|██████████████▏                        | 223M/611M [00:08<00:15, 24.8MB/s]     37%|██████████████▍                        | 226M/611M [00:08<00:16, 23.6MB/s]     37%|██████████████▌                        | 228M/611M [00:08<00:17, 21.9MB/s]     38%|██████████████▊                        | 231M/611M [00:09<00:16, 23.2MB/s]     39%|███████████████                        | 235M/611M [00:09<00:13, 27.0MB/s]     39%|███████████████▎                       | 240M/611M [00:09<00:11, 33.3MB/s]     40%|███████████████▋                       | 246M/611M [00:09<00:09, 38.1MB/s]     41%|███████████████▉                       | 250M/611M [00:09<00:09, 38.4MB/s]     42%|████████████████▏                      | 254M/611M [00:09<00:10, 35.1MB/s]     42%|████████████████▍                      | 258M/611M [00:09<00:12, 29.0MB/s]     43%|████████████████▊                      | 264M/611M [00:09<00:09, 36.6MB/s]     44%|█████████████████▎                     | 270M/611M [00:10<00:07, 43.5MB/s]     45%|█████████████████▌                     | 275M/611M [00:10<00:08, 40.4MB/s]     46%|█████████████████▊                     | 280M/611M [00:10<00:09, 34.2MB/s]     46%|██████████████████                     | 283M/611M [00:10<00:09, 33.9MB/s]     47%|██████████████████▎                    | 287M/611M [00:10<00:10, 32.2MB/s]     48%|██████████████████▌                    | 291M/611M [00:10<00:10, 29.4MB/s]     48%|██████████████████▊                    | 294M/611M [00:10<00:12, 25.6MB/s]     49%|██████████████████▉                    | 296M/611M [00:11<00:12, 25.1MB/s]     49%|███████████████████                    | 299M/611M [00:11<00:13, 23.5MB/s]     49%|███████████████████▎                   | 302M/611M [00:11<00:12, 24.4MB/s]     50%|███████████████████▍                   | 304M/611M [00:11<00:13, 23.5MB/s]     50%|███████████████████▌                   | 307M/611M [00:11<00:14, 20.5MB/s]     51%|███████████████████▋                   | 309M/611M [00:11<00:14, 20.6MB/s]     51%|███████████████████▉                   | 313M/611M [00:11<00:11, 26.3MB/s]     52%|████████████████████▏                  | 316M/611M [00:11<00:11, 25.7MB/s]     53%|████████████████████▌                  | 321M/611M [00:11<00:08, 33.1MB/s]     53%|████████████████████▊                  | 325M/611M [00:12<00:08, 33.9MB/s]     54%|████████████████████▉                  | 329M/611M [00:12<00:09, 29.8MB/s]     54%|█████████████████████▏                 | 332M/611M [00:12<00:11, 23.8MB/s]     55%|█████████████████████▎                 | 334M/611M [00:12<00:12, 22.0MB/s]     55%|█████████████████████▌                 | 337M/611M [00:12<00:12, 22.6MB/s]     56%|█████████████████████▋                 | 340M/611M [00:12<00:11, 24.4MB/s]     56%|█████████████████████▉                 | 343M/611M [00:12<00:10, 26.1MB/s]     57%|██████████████████████▏                | 347M/611M [00:12<00:08, 29.5MB/s]     57%|██████████████████████▎                | 350M/611M [00:13<00:09, 26.6MB/s]     58%|██████████████████████▌                | 353M/611M [00:13<00:09, 27.3MB/s]     58%|██████████████████████▋                | 356M/611M [00:13<00:08, 28.5MB/s]     59%|██████████████████████▉                | 359M/611M [00:13<00:08, 29.6MB/s]     59%|███████████████████████▏               | 362M/611M [00:13<00:09, 26.6MB/s]     60%|███████████████████████▎               | 365M/611M [00:13<00:10, 23.7MB/s]     60%|███████████████████████▍               | 367M/611M [00:13<00:11, 20.7MB/s]     61%|███████████████████████▋               | 371M/611M [00:13<00:09, 24.9MB/s]     61%|███████████████████████▉               | 374M/611M [00:14<00:09, 24.7MB/s]     62%|████████████████████████               | 377M/611M [00:14<00:09, 25.4MB/s]     62%|████████████████████████▎              | 380M/611M [00:14<00:08, 27.8MB/s]     63%|████████████████████████▌              | 384M/611M [00:14<00:09, 23.4MB/s]     64%|████████████████████████▉              | 390M/611M [00:14<00:07, 27.6MB/s]     65%|█████████████████████████▎             | 397M/611M [00:14<00:05, 35.9MB/s]     66%|█████████████████████████▌             | 401M/611M [00:14<00:06, 33.8MB/s]     66%|█████████████████████████▊             | 405M/611M [00:15<00:06, 33.9MB/s]     67%|██████████████████████████             | 408M/611M [00:15<00:07, 26.7MB/s]     67%|██████████████████████████▎            | 411M/611M [00:15<00:07, 27.0MB/s]     68%|██████████████████████████▍            | 414M/611M [00:15<00:07, 26.9MB/s]     69%|██████████████████████████▊            | 420M/611M [00:15<00:05, 34.8MB/s]     69%|███████████████████████████            | 424M/611M [00:15<00:05, 32.5MB/s]     70%|███████████████████████████▎           | 428M/611M [00:15<00:05, 35.2MB/s]     71%|███████████████████████████▌           | 432M/611M [00:15<00:05, 35.6MB/s]     72%|███████████████████████████▉           | 437M/611M [00:16<00:04, 37.5MB/s]     72%|████████████████████████████▎          | 442M/611M [00:16<00:04, 42.0MB/s]     73%|████████████████████████████▌          | 447M/611M [00:16<00:05, 29.9MB/s]     74%|████████████████████████████▊          | 450M/611M [00:16<00:06, 26.3MB/s]     74%|████████████████████████████▉          | 453M/611M [00:16<00:06, 23.2MB/s]     75%|█████████████████████████████▏         | 456M/611M [00:16<00:06, 24.2MB/s]     75%|█████████████████████████████▎         | 459M/611M [00:16<00:05, 25.3MB/s]     76%|█████████████████████████████▍         | 462M/611M [00:17<00:06, 24.5MB/s]     76%|█████████████████████████████▋         | 464M/611M [00:17<00:06, 23.6MB/s]     76%|█████████████████████████████▊         | 467M/611M [00:17<00:06, 22.9MB/s]     77%|█████████████████████████████▉         | 469M/611M [00:17<00:06, 22.5MB/s]     77%|██████████████████████████████▏        | 472M/611M [00:17<00:05, 23.8MB/s]     78%|██████████████████████████████▎        | 475M/611M [00:17<00:05, 25.0MB/s]     78%|██████████████████████████████▍        | 477M/611M [00:17<00:06, 21.2MB/s]     79%|██████████████████████████████▋        | 481M/611M [00:17<00:05, 25.0MB/s]     79%|██████████████████████████████▉        | 484M/611M [00:17<00:05, 25.2MB/s]     80%|███████████████████████████████        | 486M/611M [00:18<00:05, 22.0MB/s]     80%|███████████████████████████████▏       | 489M/611M [00:18<00:06, 19.1MB/s]     80%|███████████████████████████████▎       | 491M/611M [00:18<00:06, 19.4MB/s]     81%|███████████████████████████████▍       | 493M/611M [00:18<00:06, 19.0MB/s]     81%|███████████████████████████████▌       | 495M/611M [00:18<00:05, 19.6MB/s]     81%|███████████████████████████████▊       | 497M/611M [00:18<00:05, 20.2MB/s]     82%|███████████████████████████████▉       | 499M/611M [00:18<00:06, 18.2MB/s]     83%|████████████████████████████████▎      | 505M/611M [00:19<00:04, 22.7MB/s]     84%|████████████████████████████████▌      | 511M/611M [00:19<00:03, 29.9MB/s]     84%|████████████████████████████████▉      | 516M/611M [00:19<00:03, 30.6MB/s]     85%|█████████████████████████████████▎     | 522M/611M [00:19<00:02, 37.9MB/s]     86%|█████████████████████████████████▋     | 527M/611M [00:19<00:02, 41.6MB/s]     87%|█████████████████████████████████▉     | 531M/611M [00:19<00:01, 40.3MB/s]     88%|██████████████████████████████████▏    | 536M/611M [00:19<00:02, 30.6MB/s]     88%|██████████████████████████████████▍    | 540M/611M [00:19<00:02, 33.0MB/s]     89%|██████████████████████████████████▋    | 544M/611M [00:20<00:02, 31.4MB/s]     90%|██████████████████████████████████▉    | 547M/611M [00:20<00:02, 29.6MB/s]     90%|███████████████████████████████████▏   | 550M/611M [00:20<00:02, 29.5MB/s]     91%|███████████████████████████████████▎   | 553M/611M [00:20<00:02, 28.4MB/s]     91%|███████████████████████████████████▌   | 558M/611M [00:20<00:01, 31.6MB/s]     92%|███████████████████████████████████▉   | 562M/611M [00:20<00:01, 31.7MB/s]     93%|████████████████████████████████████   | 565M/611M [00:20<00:01, 27.7MB/s]     93%|████████████████████████████████████▎  | 569M/611M [00:20<00:01, 29.5MB/s]     94%|████████████████████████████████████▌  | 572M/611M [00:21<00:01, 27.8MB/s]     94%|████████████████████████████████████▋  | 575M/611M [00:21<00:01, 26.1MB/s]     95%|████████████████████████████████████▉  | 577M/611M [00:21<00:01, 26.1MB/s]     95%|█████████████████████████████████████  | 580M/611M [00:21<00:01, 22.3MB/s]     95%|█████████████████████████████████████▏ | 582M/611M [00:21<00:01, 21.9MB/s]     96%|█████████████████████████████████████▎ | 585M/611M [00:21<00:01, 21.0MB/s]     96%|█████████████████████████████████████▍ | 587M/611M [00:21<00:01, 21.8MB/s]     97%|█████████████████████████████████████▋ | 590M/611M [00:21<00:00, 21.5MB/s]     97%|█████████████████████████████████████▉ | 595M/611M [00:22<00:00, 25.5MB/s]     98%|██████████████████████████████████████▎| 600M/611M [00:22<00:00, 24.3MB/s]     99%|██████████████████████████████████████▋| 606M/611M [00:22<00:00, 31.2MB/s]    100%|██████████████████████████████████████▉| 609M/611M [00:22<00:00, 18.4MB/s]      0%|                                               | 0.00/611M [00:00<?, ?B/s]    100%|███████████████████████████████████████| 611M/611M [00:00<00:00, 1.32TB/s]
    Attempting to create new mne-python configuration file:
    /github/home/.mne/mne-python.json
    Opening raw data file /github/home/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_meg.fif...
        Range : 237600 ... 506999 =    791.189 ...  1688.266 secs
    Ready.
    Reading 0 ... 269399  =      0.000 ...   897.077 secs...
    Setting up band-stop filter

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandstop filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower transition bandwidth: 0.50 Hz
    - Upper transition bandwidth: 0.50 Hz
    - Filter length: 1983 samples (6.603 sec)

    Filtering raw data in 1 contiguous segment
    Setting up high-pass filter at 2 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal highpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 2.00
    - Lower transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 1.00 Hz)
    - Filter length: 497 samples (1.655 sec)

    111 events found
    Event IDs: [1]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-3.9992341833870637, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1202 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    5 bad epochs dropped
    Computing rank from data with rank=None
        Using tolerance 7.5e-09 (2.2e-16 eps * 204 dim * 1.7e+05  max singular value)
        Estimated rank (grad): 204
        GRAD: rank 204 computed from 204 data channels with 0 projectors
    /github/workspace/alphacsc/datasets/mne_data.py:94: RuntimeWarning: Something went wrong in the data-driven estimation of the data rank as it exceeds the theoretical rank from the info (204 > 64). Consider setting rank to "auto" or setting it explicitly as an integer.
      cov = mne.compute_covariance(epochs_cov)
    Reducing data rank from 204 -> 204
    Estimating covariance using EMPIRICAL
    Done.
    Number of samples used : 127412
    [done]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-2.001282051803185, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1803 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    8 bad epochs dropped




.. GENERATED FROM PYTHON SOURCE LINES 67-68

Fit the model and learn rank1 atoms

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    cdl.fit(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ..............
    [BatchCDL] Converged after 14 iteration, (dz, du) = 8.570e-05, 8.726e-05
    [BatchCDL] Fit in 794.0s

    <alphacsc.convolutional_dictionary_learning.BatchCDL object at 0x7fbda3afb640>



.. GENERATED FROM PYTHON SOURCE LINES 71-73

Display the 4-th atom, which displays a :math:`\mu`-waveform in its temporal
pattern.

.. GENERATED FROM PYTHON SOURCE LINES 73-108

.. code-block:: default


    import mne
    import numpy as np
    import matplotlib.pyplot as plt

    i_atom = 4
    n_plots = 3
    figsize = (n_plots * 5, 5.5)
    fig, axes = plt.subplots(1, n_plots, figsize=figsize, squeeze=False)

    # Plot the spatial map of the learn atom using mne topomap
    ax = axes[0, 0]
    u_hat = cdl.u_hat_[i_atom]
    mne.viz.plot_topomap(u_hat, info, axes=ax, show=False)
    ax.set(title='Learned spatial pattern')

    # Plot the temporal pattern of the learn atom
    ax = axes[0, 1]
    v_hat = cdl.v_hat_[i_atom]
    t = np.arange(v_hat.size) / sfreq
    ax.plot(t, v_hat)
    ax.set(xlabel='Time (sec)', title='Learned temporal waveform')
    ax.grid(True)

    # Plot the psd of the time atom
    ax = axes[0, 2]
    psd = np.abs(np.fft.rfft(v_hat)) ** 2
    frequencies = np.linspace(0, sfreq / 2.0, len(psd))
    ax.semilogy(frequencies, psd)
    ax.set(xlabel='Frequencies (Hz)', title='Power Spectral Density')
    ax.grid(True)
    ax.set_xlim(0, 30)

    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :alt: Learned spatial pattern, Learned temporal waveform, Power Spectral Density
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 14 minutes  1.256 seconds)


.. _sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_somato_mu_waves.py <plot_somato_mu_waves.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_somato_mu_waves.ipynb <plot_somato_mu_waves.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multicsc/plot_somato_mu_waves.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multicsc_plot_somato_mu_waves.py:


===========================================================
Extracting :math:`\mu`-wave from the somato-sensory dataset
===========================================================

This example illustrates how to learn rank-1 atoms [1]_ on the multivariate
somato-sensorymotor dataset from :code:`mne`. The displayed results highlight
the presence of :math:`\mu`-waves located in the SI cortex.

.. [1] Dupré La Tour, T., Moreau, T., Jas, M., & Gramfort, A. (2018).
    `Multivariate Convolutional Sparse Coding for Electromagnetic Brain Signals
    <https://arxiv.org/abs/1805.09654v2>`_. Advances in Neural Information
    Processing Systems (NIPS).

.. GENERATED FROM PYTHON SOURCE LINES 15-23

.. code-block:: default


    # Authors: Thomas Moreau <thomas.moreau@inria.fr>
    #          Mainak Jas <mainak.jas@telecom-paristech.fr>
    #          Tom Dupre La Tour <tom.duprelatour@telecom-paristech.fr>
    #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Let us first define the parameters of our model.

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default


    sfreq = 150.

    # Define the shape of the dictionary
    n_atoms = 25
    n_times_atom = int(round(sfreq * 1.0))  # 1000. ms








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Next, we define the parameters for multivariate CSC

.. GENERATED FROM PYTHON SOURCE LINES 34-56

.. code-block:: default


    from alphacsc import BatchCDL
    cdl = BatchCDL(
        # Shape of the dictionary
        n_atoms=n_atoms,
        n_times_atom=n_times_atom,
        # Request a rank1 dictionary with unit norm temporal and spatial maps
        rank1=True, uv_constraint='separate',
        # Initialize the dictionary with random chunk from the data
        D_init='chunk',
        # rescale the regularization parameter to be 20% of lambda_max
        lmbd_max="scaled", reg=.2,
        # Number of iteration for the alternate minimization and cvg threshold
        n_iter=100, eps=1e-4,
        # solver for the z-step
        solver_z="lgcd", solver_z_kwargs={'tol': 1e-2, 'max_iter': 1000},
        # solver for the d-step
        solver_d='alternate_adaptive', solver_d_kwargs={'max_iter': 300},
        # Technical parameters
        verbose=1, random_state=0, n_jobs=6)









.. GENERATED FROM PYTHON SOURCE LINES 57-60

Here, we load the data from the somato-sensory dataset and preprocess them
in epochs. The epochs are selected around the stim, starting 2 seconds
before and finishing 4 seconds after.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default


    from alphacsc.datasets.mne_data import load_data
    t_lim = (-2, 4)
    X, info = load_data(dataset='somato', epoch=t_lim, sfreq=sfreq)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for somato...
      0%|                                               | 0.00/611M [00:00<?, ?B/s]      0%|▏                                     | 2.83M/611M [00:00<00:21, 28.3MB/s]      1%|▌                                     | 8.80M/611M [00:00<00:12, 46.8MB/s]      2%|▉                                     | 14.9M/611M [00:00<00:11, 53.1MB/s]      3%|█▎                                    | 21.0M/611M [00:00<00:10, 56.2MB/s]      4%|█▋                                    | 27.1M/611M [00:00<00:10, 58.2MB/s]      5%|██                                    | 33.3M/611M [00:00<00:09, 59.3MB/s]      6%|██▍                                   | 39.4M/611M [00:00<00:09, 60.0MB/s]      7%|██▊                                   | 45.6M/611M [00:00<00:09, 60.6MB/s]      8%|███▏                                  | 51.8M/611M [00:00<00:09, 61.0MB/s]      9%|███▌                                  | 57.9M/611M [00:01<00:09, 61.1MB/s]     10%|███▉                                  | 64.1M/611M [00:01<00:08, 61.3MB/s]     12%|████▎                                 | 70.3M/611M [00:01<00:08, 61.4MB/s]     13%|████▊                                 | 76.4M/611M [00:01<00:08, 61.4MB/s]     14%|█████▏                                | 82.6M/611M [00:01<00:08, 61.4MB/s]     15%|█████▌                                | 88.7M/611M [00:01<00:08, 61.4MB/s]     16%|█████▉                                | 94.9M/611M [00:01<00:08, 61.5MB/s]     17%|██████▍                                | 101M/611M [00:01<00:08, 61.5MB/s]     18%|██████▊                                | 107M/611M [00:01<00:08, 61.5MB/s]     19%|███████▏                               | 113M/611M [00:01<00:08, 61.6MB/s]     20%|███████▋                               | 120M/611M [00:02<00:07, 61.6MB/s]     21%|████████                               | 126M/611M [00:02<00:07, 61.5MB/s]     22%|████████▍                              | 132M/611M [00:02<00:07, 61.5MB/s]     23%|████████▊                              | 138M/611M [00:02<00:07, 61.5MB/s]     24%|█████████▏                             | 144M/611M [00:02<00:07, 61.5MB/s]     25%|█████████▌                             | 150M/611M [00:02<00:07, 61.6MB/s]     26%|█████████▉                             | 156M/611M [00:02<00:07, 61.6MB/s]     27%|██████████▍                            | 163M/611M [00:02<00:07, 61.6MB/s]     28%|██████████▊                            | 169M/611M [00:02<00:07, 61.7MB/s]     29%|███████████▏                           | 175M/611M [00:02<00:07, 61.6MB/s]     30%|███████████▌                           | 181M/611M [00:03<00:06, 61.6MB/s]     31%|███████████▉                           | 187M/611M [00:03<00:06, 61.6MB/s]     32%|████████████▎                          | 193M/611M [00:03<00:06, 61.5MB/s]     33%|████████████▊                          | 200M/611M [00:03<00:06, 61.6MB/s]     34%|█████████████▏                         | 206M/611M [00:03<00:06, 61.6MB/s]     35%|█████████████▌                         | 212M/611M [00:03<00:06, 61.6MB/s]     36%|█████████████▉                         | 218M/611M [00:03<00:06, 61.6MB/s]     37%|██████████████▎                        | 224M/611M [00:03<00:06, 61.5MB/s]     38%|██████████████▋                        | 230M/611M [00:03<00:06, 61.5MB/s]     39%|███████████████                        | 237M/611M [00:03<00:06, 61.5MB/s]     40%|███████████████▌                       | 243M/611M [00:04<00:05, 61.4MB/s]     41%|███████████████▉                       | 249M/611M [00:04<00:05, 61.5MB/s]     42%|████████████████▎                      | 255M/611M [00:04<00:05, 61.5MB/s]     43%|████████████████▋                      | 261M/611M [00:04<00:05, 61.3MB/s]     44%|█████████████████                      | 267M/611M [00:04<00:05, 61.4MB/s]     45%|█████████████████▍                     | 274M/611M [00:04<00:05, 61.5MB/s]     46%|█████████████████▊                     | 280M/611M [00:04<00:05, 61.4MB/s]     47%|██████████████████▎                    | 286M/611M [00:04<00:05, 61.4MB/s]     48%|██████████████████▋                    | 292M/611M [00:04<00:05, 61.4MB/s]     49%|███████████████████                    | 298M/611M [00:04<00:05, 61.5MB/s]     50%|███████████████████▍                   | 304M/611M [00:05<00:04, 61.6MB/s]     51%|███████████████████▊                   | 310M/611M [00:05<00:04, 61.5MB/s]     52%|████████████████████▏                  | 317M/611M [00:05<00:04, 61.5MB/s]     53%|████████████████████▌                  | 323M/611M [00:05<00:04, 61.5MB/s]     54%|█████████████████████                  | 329M/611M [00:05<00:04, 61.6MB/s]     55%|█████████████████████▍                 | 335M/611M [00:05<00:04, 61.6MB/s]     56%|█████████████████████▊                 | 341M/611M [00:05<00:04, 61.6MB/s]     57%|██████████████████████▏                | 347M/611M [00:05<00:04, 61.6MB/s]     58%|██████████████████████▌                | 354M/611M [00:05<00:04, 61.6MB/s]     59%|██████████████████████▉                | 360M/611M [00:05<00:04, 61.5MB/s]     60%|███████████████████████▍               | 366M/611M [00:06<00:03, 61.4MB/s]     61%|███████████████████████▊               | 372M/611M [00:06<00:03, 61.5MB/s]     62%|████████████████████████▏              | 378M/611M [00:06<00:03, 61.4MB/s]     63%|████████████████████████▌              | 384M/611M [00:06<00:03, 61.5MB/s]     64%|████████████████████████▉              | 391M/611M [00:06<00:03, 61.6MB/s]     65%|█████████████████████████▎             | 397M/611M [00:06<00:03, 61.5MB/s]     66%|█████████████████████████▋             | 403M/611M [00:06<00:03, 61.6MB/s]     67%|██████████████████████████▏            | 409M/611M [00:06<00:03, 61.5MB/s]     68%|██████████████████████████▌            | 415M/611M [00:06<00:03, 61.5MB/s]     69%|██████████████████████████▉            | 421M/611M [00:06<00:03, 61.5MB/s]     70%|███████████████████████████▎           | 428M/611M [00:07<00:02, 61.4MB/s]     71%|███████████████████████████▋           | 434M/611M [00:07<00:02, 61.4MB/s]     72%|████████████████████████████           | 440M/611M [00:07<00:02, 61.4MB/s]     73%|████████████████████████████▍          | 446M/611M [00:07<00:02, 61.6MB/s]     74%|████████████████████████████▉          | 452M/611M [00:07<00:03, 52.5MB/s]     75%|█████████████████████████████▎         | 458M/611M [00:07<00:02, 54.8MB/s]     76%|█████████████████████████████▋         | 464M/611M [00:07<00:02, 56.7MB/s]     77%|██████████████████████████████         | 471M/611M [00:07<00:02, 58.0MB/s]     78%|██████████████████████████████▍        | 477M/611M [00:07<00:02, 59.1MB/s]     79%|██████████████████████████████▊        | 483M/611M [00:07<00:02, 59.7MB/s]     80%|███████████████████████████████▏       | 489M/611M [00:08<00:02, 60.2MB/s]     81%|███████████████████████████████▋       | 495M/611M [00:08<00:01, 60.6MB/s]     82%|████████████████████████████████       | 501M/611M [00:08<00:01, 60.8MB/s]     83%|████████████████████████████████▍      | 508M/611M [00:08<00:01, 61.0MB/s]     84%|████████████████████████████████▊      | 514M/611M [00:08<00:01, 61.1MB/s]     85%|█████████████████████████████████▏     | 520M/611M [00:08<00:01, 61.3MB/s]     86%|█████████████████████████████████▌     | 526M/611M [00:08<00:01, 61.3MB/s]     87%|█████████████████████████████████▉     | 532M/611M [00:08<00:01, 61.3MB/s]     88%|██████████████████████████████████▍    | 538M/611M [00:08<00:01, 61.4MB/s]     89%|██████████████████████████████████▊    | 544M/611M [00:08<00:01, 61.4MB/s]     90%|███████████████████████████████████▏   | 551M/611M [00:09<00:00, 61.4MB/s]     91%|███████████████████████████████████▌   | 557M/611M [00:09<00:00, 61.4MB/s]     92%|███████████████████████████████████▉   | 563M/611M [00:09<00:00, 61.2MB/s]     93%|████████████████████████████████████▎  | 569M/611M [00:09<00:00, 61.3MB/s]     94%|████████████████████████████████████▋  | 575M/611M [00:09<00:00, 61.4MB/s]     95%|█████████████████████████████████████▏ | 581M/611M [00:09<00:00, 61.4MB/s]     96%|█████████████████████████████████████▌ | 587M/611M [00:09<00:00, 61.5MB/s]     97%|█████████████████████████████████████▉ | 594M/611M [00:09<00:00, 61.4MB/s]     98%|██████████████████████████████████████▎| 600M/611M [00:09<00:00, 61.4MB/s]     99%|██████████████████████████████████████▋| 606M/611M [00:09<00:00, 61.5MB/s]      0%|                                               | 0.00/611M [00:00<?, ?B/s]    100%|███████████████████████████████████████| 611M/611M [00:00<00:00, 1.05TB/s]
    Attempting to create new mne-python configuration file:
    /github/home/.mne/mne-python.json
    Opening raw data file /github/home/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_meg.fif...
        Range : 237600 ... 506999 =    791.189 ...  1688.266 secs
    Ready.
    Reading 0 ... 269399  =      0.000 ...   897.077 secs...
    Setting up band-stop filter

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandstop filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower transition bandwidth: 0.50 Hz
    - Upper transition bandwidth: 0.50 Hz
    - Filter length: 1983 samples (6.603 sec)

    Filtering raw data in 1 contiguous segment
    Setting up high-pass filter at 2 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal highpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 2.00
    - Lower transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 1.00 Hz)
    - Filter length: 497 samples (1.655 sec)

    111 events found
    Event IDs: [1]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-3.9992341833870637, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1202 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    5 bad epochs dropped
    Computing rank from data with rank=None
        Using tolerance 7.5e-09 (2.2e-16 eps * 204 dim * 1.7e+05  max singular value)
        Estimated rank (grad): 204
        GRAD: rank 204 computed from 204 data channels with 0 projectors
    /github/workspace/alphacsc/datasets/mne_data.py:94: RuntimeWarning: Something went wrong in the data-driven estimation of the data rank as it exceeds the theoretical rank from the info (204 > 64). Consider setting rank to "auto" or setting it explicitly as an integer.
      cov = mne.compute_covariance(epochs_cov)
    Reducing data rank from 204 -> 204
    Estimating covariance using EMPIRICAL
    Done.
    Number of samples used : 127412
    [done]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-2.001282051803185, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1803 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    8 bad epochs dropped




.. GENERATED FROM PYTHON SOURCE LINES 67-68

Fit the model and learn rank1 atoms

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    cdl.fit(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ./github/workspace/alphacsc/utils/optim.py:136: DeprecationWarning: Please use `scalar_search_armijo` from the `scipy.optimize` namespace, the `scipy.optimize.linesearch` namespace is deprecated.
      step_size, obj_uv = optimize.linesearch.scalar_search_armijo(
    .............
    [BatchCDL] Converged after 14 iteration, (dz, du) = 8.570e-05, 8.726e-05
    [BatchCDL] Fit in 1052.3s

    <alphacsc.convolutional_dictionary_learning.BatchCDL object at 0x7f690a652790>



.. GENERATED FROM PYTHON SOURCE LINES 71-73

Display the 4-th atom, which displays a :math:`\mu`-waveform in its temporal
pattern.

.. GENERATED FROM PYTHON SOURCE LINES 73-108

.. code-block:: default


    import mne
    import numpy as np
    import matplotlib.pyplot as plt

    i_atom = 4
    n_plots = 3
    figsize = (n_plots * 5, 5.5)
    fig, axes = plt.subplots(1, n_plots, figsize=figsize, squeeze=False)

    # Plot the spatial map of the learn atom using mne topomap
    ax = axes[0, 0]
    u_hat = cdl.u_hat_[i_atom]
    mne.viz.plot_topomap(u_hat, info, axes=ax, show=False)
    ax.set(title='Learned spatial pattern')

    # Plot the temporal pattern of the learn atom
    ax = axes[0, 1]
    v_hat = cdl.v_hat_[i_atom]
    t = np.arange(v_hat.size) / sfreq
    ax.plot(t, v_hat)
    ax.set(xlabel='Time (sec)', title='Learned temporal waveform')
    ax.grid(True)

    # Plot the psd of the time atom
    ax = axes[0, 2]
    psd = np.abs(np.fft.rfft(v_hat)) ** 2
    frequencies = np.linspace(0, sfreq / 2.0, len(psd))
    ax.semilogy(frequencies, psd)
    ax.set(xlabel='Frequencies (Hz)', title='Power Spectral Density')
    ax.grid(True)
    ax.set_xlim(0, 30)

    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :alt: Learned spatial pattern, Learned temporal waveform, Power Spectral Density
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 18 minutes  10.975 seconds)


.. _sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_somato_mu_waves.py <plot_somato_mu_waves.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_somato_mu_waves.ipynb <plot_somato_mu_waves.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

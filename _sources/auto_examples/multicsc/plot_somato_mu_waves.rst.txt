
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multicsc/plot_somato_mu_waves.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multicsc_plot_somato_mu_waves.py:


===========================================================
Extracting :math:`\mu`-wave from the somato-sensory dataset
===========================================================

This example illustrates how to learn rank-1 atoms [1]_ on the multivariate
somato-sensorymotor dataset from :code:`mne`. The displayed results highlight
the presence of :math:`\mu`-waves located in the SI cortex.

.. [1] Dupré La Tour, T., Moreau, T., Jas, M., & Gramfort, A. (2018).
    `Multivariate Convolutional Sparse Coding for Electromagnetic Brain Signals
    <https://arxiv.org/abs/1805.09654v2>`_. Advances in Neural Information
    Processing Systems (NIPS).

.. GENERATED FROM PYTHON SOURCE LINES 15-23

.. code-block:: default


    # Authors: Thomas Moreau <thomas.moreau@inria.fr>
    #          Mainak Jas <mainak.jas@telecom-paristech.fr>
    #          Tom Dupre La Tour <tom.duprelatour@telecom-paristech.fr>
    #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Let us first define the parameters of our model.

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default


    sfreq = 150.

    # Define the shape of the dictionary
    n_atoms = 25
    n_times_atom = int(round(sfreq * 1.0))  # 1000. ms








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Next, we define the parameters for multivariate CSC

.. GENERATED FROM PYTHON SOURCE LINES 34-56

.. code-block:: default


    from alphacsc import BatchCDL
    cdl = BatchCDL(
        # Shape of the dictionary
        n_atoms=n_atoms,
        n_times_atom=n_times_atom,
        # Request a rank1 dictionary with unit norm temporal and spatial maps
        rank1=True, uv_constraint='separate',
        # Initialize the dictionary with random chunk from the data
        D_init='chunk',
        # rescale the regularization parameter to be 20% of lambda_max
        lmbd_max="scaled", reg=.2,
        # Number of iteration for the alternate minimization and cvg threshold
        n_iter=100, eps=1e-4,
        # solver for the z-step
        solver_z="lgcd", solver_z_kwargs={'tol': 1e-2, 'max_iter': 1000},
        # solver for the d-step
        solver_d='alternate_adaptive', solver_d_kwargs={'max_iter': 300},
        # Technical parameters
        verbose=1, random_state=0, n_jobs=6)









.. GENERATED FROM PYTHON SOURCE LINES 57-60

Here, we load the data from the somato-sensory dataset and preprocess them
in epochs. The epochs are selected around the stim, starting 2 seconds
before and finishing 4 seconds after.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default


    from alphacsc.datasets.mne_data import load_data
    t_lim = (-2, 4)
    X, info = load_data(dataset='somato', epoch=t_lim, sfreq=sfreq)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for somato...
      0%|                                               | 0.00/611M [00:00<?, ?B/s]      0%|                                       | 314k/611M [00:00<03:23, 3.00MB/s]      0%|                                       | 830k/611M [00:00<02:46, 3.67MB/s]      0%|                                      | 1.35M/611M [00:00<02:34, 3.95MB/s]      0%|                                      | 1.87M/611M [00:00<02:42, 3.75MB/s]      0%|▏                                     | 2.39M/611M [00:00<02:24, 4.19MB/s]      1%|▏                                     | 3.18M/611M [00:00<02:03, 4.92MB/s]      1%|▏                                     | 3.96M/611M [00:00<01:49, 5.53MB/s]      1%|▎                                     | 4.69M/611M [00:00<01:40, 6.01MB/s]      1%|▎                                     | 5.30M/611M [00:01<01:46, 5.70MB/s]      1%|▍                                     | 6.58M/611M [00:01<01:24, 7.13MB/s]      1%|▍                                     | 7.36M/611M [00:01<01:36, 6.24MB/s]      1%|▍                                     | 8.00M/611M [00:01<01:51, 5.40MB/s]      1%|▌                                     | 8.56M/611M [00:01<01:52, 5.36MB/s]      2%|▌                                     | 9.71M/611M [00:01<01:28, 6.77MB/s]      2%|▋                                     | 11.0M/611M [00:01<01:12, 8.30MB/s]      2%|▊                                     | 13.9M/611M [00:01<00:43, 13.9MB/s]      3%|█▏                                    | 18.7M/611M [00:02<00:25, 23.2MB/s]      4%|█▌                                    | 24.2M/611M [00:02<00:18, 32.2MB/s]      5%|█▋                                    | 27.6M/611M [00:02<00:19, 30.2MB/s]      6%|██                                    | 33.8M/611M [00:02<00:15, 38.4MB/s]      6%|██▎                                   | 37.7M/611M [00:02<00:19, 29.9MB/s]      7%|██▌                                   | 41.1M/611M [00:03<00:50, 11.4MB/s]      7%|██▋                                   | 43.6M/611M [00:03<00:52, 10.9MB/s]      7%|██▊                                   | 45.6M/611M [00:03<00:52, 10.7MB/s]      8%|██▉                                   | 47.3M/611M [00:04<00:53, 10.6MB/s]      8%|███                                   | 48.8M/611M [00:04<00:56, 10.0MB/s]      8%|███                                   | 50.1M/611M [00:04<00:59, 9.45MB/s]      8%|███▏                                  | 51.2M/611M [00:04<01:00, 9.31MB/s]      9%|███▎                                  | 52.3M/611M [00:04<01:04, 8.71MB/s]      9%|███▎                                  | 53.2M/611M [00:04<01:11, 7.80MB/s]      9%|███▎                                  | 54.2M/611M [00:04<01:09, 8.02MB/s]      9%|███▍                                  | 55.0M/611M [00:05<01:11, 7.80MB/s]      9%|███▍                                  | 55.8M/611M [00:05<01:12, 7.61MB/s]      9%|███▌                                  | 56.8M/611M [00:05<01:10, 7.90MB/s]      9%|███▌                                  | 57.8M/611M [00:05<01:09, 7.93MB/s]     10%|███▋                                  | 58.6M/611M [00:05<01:10, 7.82MB/s]     10%|███▋                                  | 59.6M/611M [00:05<01:05, 8.38MB/s]     10%|███▉                                  | 63.0M/611M [00:05<00:36, 15.1MB/s]     11%|████▏                                 | 67.3M/611M [00:05<00:23, 22.7MB/s]     11%|████▎                                 | 70.1M/611M [00:05<00:25, 21.4MB/s]     12%|████▌                                 | 72.3M/611M [00:06<00:32, 16.6MB/s]     12%|████▋                                 | 75.3M/611M [00:06<00:27, 19.5MB/s]     13%|████▉                                 | 78.5M/611M [00:06<00:24, 21.9MB/s]     13%|█████                                 | 80.9M/611M [00:06<00:35, 15.1MB/s]     14%|█████▏                                | 82.8M/611M [00:06<00:43, 12.2MB/s]     14%|█████▎                                | 84.4M/611M [00:07<00:48, 11.0MB/s]     14%|█████▎                                | 85.7M/611M [00:07<00:53, 9.90MB/s]     14%|█████▍                                | 86.9M/611M [00:07<00:59, 8.84MB/s]     14%|█████▍                                | 87.9M/611M [00:07<01:05, 8.02MB/s]     15%|█████▌                                | 88.8M/611M [00:07<01:08, 7.57MB/s]     15%|█████▌                                | 89.5M/611M [00:07<01:08, 7.61MB/s]     15%|█████▋                                | 90.5M/611M [00:08<01:05, 7.98MB/s]     15%|█████▋                                | 91.5M/611M [00:08<01:03, 8.13MB/s]     15%|█████▊                                | 92.6M/611M [00:08<00:59, 8.63MB/s]     15%|█████▊                                | 93.6M/611M [00:08<01:00, 8.55MB/s]     16%|█████▉                                | 94.7M/611M [00:08<00:59, 8.64MB/s]     16%|█████▉                                | 95.7M/611M [00:08<01:00, 8.51MB/s]     16%|██████                                | 96.6M/611M [00:08<01:02, 8.20MB/s]     16%|██████                                | 97.4M/611M [00:08<01:08, 7.51MB/s]     16%|██████                                | 98.2M/611M [00:09<01:17, 6.61MB/s]     16%|██████▏                               | 98.9M/611M [00:09<01:17, 6.60MB/s]     16%|██████▏                               | 99.5M/611M [00:09<01:20, 6.31MB/s]     16%|██████▍                                | 101M/611M [00:09<01:08, 7.49MB/s]     17%|██████▍                                | 101M/611M [00:09<01:07, 7.56MB/s]     17%|██████▌                                | 102M/611M [00:09<01:16, 6.65MB/s]     17%|██████▌                                | 103M/611M [00:09<01:17, 6.58MB/s]     17%|██████▋                                | 104M/611M [00:09<00:57, 8.74MB/s]     18%|██████▉                                | 108M/611M [00:09<00:31, 15.8MB/s]     18%|███████▏                               | 112M/611M [00:10<00:21, 23.2MB/s]     19%|███████▍                               | 116M/611M [00:10<00:17, 28.7MB/s]     20%|███████▋                               | 120M/611M [00:10<00:15, 31.7MB/s]     21%|████████                               | 126M/611M [00:10<00:12, 38.6MB/s]     21%|████████▎                              | 130M/611M [00:10<00:22, 21.8MB/s]     22%|████████▍                              | 133M/611M [00:11<00:40, 11.7MB/s]     22%|████████▋                              | 135M/611M [00:11<00:44, 10.6MB/s]     22%|████████▋                              | 137M/611M [00:11<00:47, 10.1MB/s]     23%|████████▊                              | 138M/611M [00:12<00:54, 8.67MB/s]     23%|████████▉                              | 140M/611M [00:12<01:01, 7.65MB/s]     23%|████████▉                              | 141M/611M [00:12<01:10, 6.67MB/s]     23%|█████████                              | 142M/611M [00:12<01:28, 5.28MB/s]     23%|█████████                              | 142M/611M [00:13<01:33, 5.03MB/s]     23%|█████████                              | 143M/611M [00:13<01:33, 4.98MB/s]     23%|█████████▏                             | 143M/611M [00:13<01:37, 4.77MB/s]     24%|█████████▏                             | 144M/611M [00:13<01:35, 4.89MB/s]     24%|█████████▏                             | 145M/611M [00:13<01:32, 5.06MB/s]     24%|█████████▎                             | 146M/611M [00:13<01:18, 5.92MB/s]     24%|█████████▎                             | 146M/611M [00:13<01:20, 5.74MB/s]     24%|█████████▍                             | 147M/611M [00:13<01:12, 6.36MB/s]     24%|█████████▍                             | 148M/611M [00:14<01:09, 6.69MB/s]     24%|█████████▌                             | 149M/611M [00:14<01:06, 6.97MB/s]     25%|█████████▌                             | 150M/611M [00:14<00:54, 8.39MB/s]     25%|█████████▊                             | 153M/611M [00:14<00:36, 12.4MB/s]     26%|██████████                             | 157M/611M [00:14<00:22, 20.4MB/s]     27%|██████████▍                            | 163M/611M [00:14<00:14, 30.9MB/s]     27%|██████████▋                            | 167M/611M [00:14<00:13, 32.1MB/s]     28%|███████████                            | 172M/611M [00:14<00:10, 39.8MB/s]     29%|███████████▍                           | 179M/611M [00:14<00:09, 46.2MB/s]     30%|███████████▊                           | 185M/611M [00:15<00:08, 51.1MB/s]     31%|████████████▏                          | 190M/611M [00:15<00:08, 51.5MB/s]     32%|████████████▌                          | 196M/611M [00:15<00:07, 54.1MB/s]     33%|████████████▉                          | 203M/611M [00:15<00:06, 58.5MB/s]     34%|█████████████▍                         | 210M/611M [00:15<00:06, 60.2MB/s]     35%|█████████████▊                         | 216M/611M [00:15<00:06, 62.4MB/s]     36%|██████████████▏                        | 223M/611M [00:15<00:06, 63.0MB/s]     38%|██████████████▋                        | 229M/611M [00:15<00:05, 63.6MB/s]     39%|███████████████                        | 236M/611M [00:15<00:06, 54.6MB/s]     40%|███████████████▍                       | 241M/611M [00:15<00:07, 52.6MB/s]     40%|███████████████▊                       | 247M/611M [00:16<00:06, 53.9MB/s]     42%|████████████████▏                      | 253M/611M [00:16<00:06, 56.6MB/s]     42%|████████████████▌                      | 259M/611M [00:16<00:06, 57.2MB/s]     43%|████████████████▉                      | 265M/611M [00:16<00:06, 57.1MB/s]     44%|█████████████████▎                     | 271M/611M [00:16<00:05, 58.2MB/s]     46%|█████████████████▊                     | 278M/611M [00:16<00:05, 60.8MB/s]     47%|██████████████████▏                    | 285M/611M [00:16<00:05, 62.8MB/s]     48%|██████████████████▌                    | 291M/611M [00:16<00:04, 64.4MB/s]     49%|███████████████████                    | 298M/611M [00:16<00:04, 64.8MB/s]     50%|███████████████████▍                   | 305M/611M [00:16<00:04, 65.0MB/s]     51%|███████████████████▊                   | 311M/611M [00:17<00:05, 55.5MB/s]     52%|████████████████████▏                  | 317M/611M [00:17<00:07, 39.2MB/s]     53%|████████████████████▋                  | 323M/611M [00:17<00:06, 43.7MB/s]     54%|█████████████████████                  | 330M/611M [00:17<00:05, 48.9MB/s]     55%|█████████████████████▍                 | 336M/611M [00:17<00:05, 52.4MB/s]     56%|█████████████████████▉                 | 342M/611M [00:17<00:04, 56.0MB/s]     57%|██████████████████████▎                | 349M/611M [00:17<00:04, 59.1MB/s]     58%|██████████████████████▋                | 356M/611M [00:18<00:04, 61.0MB/s]     59%|███████████████████████▏               | 362M/611M [00:18<00:03, 62.1MB/s]     60%|███████████████████████▌               | 369M/611M [00:18<00:03, 62.1MB/s]     61%|███████████████████████▉               | 375M/611M [00:18<00:03, 61.6MB/s]     62%|████████████████████████▎              | 381M/611M [00:18<00:03, 62.5MB/s]     64%|████████████████████████▊              | 388M/611M [00:18<00:03, 63.1MB/s]     65%|█████████████████████████▏             | 394M/611M [00:18<00:03, 62.0MB/s]     66%|█████████████████████████▌             | 401M/611M [00:18<00:03, 61.1MB/s]     67%|█████████████████████████▉             | 407M/611M [00:18<00:03, 61.0MB/s]     68%|██████████████████████████▎            | 413M/611M [00:18<00:03, 61.1MB/s]     69%|██████████████████████████▊            | 419M/611M [00:19<00:03, 61.0MB/s]     70%|███████████████████████████▏           | 425M/611M [00:19<00:03, 61.1MB/s]     71%|███████████████████████████▌           | 431M/611M [00:19<00:02, 61.2MB/s]     72%|███████████████████████████▉           | 437M/611M [00:19<00:02, 61.7MB/s]     73%|████████████████████████████▎          | 444M/611M [00:19<00:02, 62.0MB/s]     74%|████████████████████████████▋          | 450M/611M [00:19<00:02, 61.3MB/s]     75%|█████████████████████████████▏         | 456M/611M [00:19<00:02, 61.0MB/s]     76%|█████████████████████████████▌         | 462M/611M [00:19<00:02, 60.7MB/s]     77%|█████████████████████████████▉         | 468M/611M [00:19<00:02, 60.3MB/s]     78%|██████████████████████████████▎        | 474M/611M [00:19<00:02, 60.3MB/s]     79%|██████████████████████████████▋        | 480M/611M [00:20<00:02, 60.3MB/s]     80%|███████████████████████████████        | 486M/611M [00:20<00:02, 60.1MB/s]     81%|███████████████████████████████▍       | 493M/611M [00:20<00:01, 60.7MB/s]     82%|███████████████████████████████▊       | 499M/611M [00:20<00:01, 61.5MB/s]     83%|████████████████████████████████▎      | 505M/611M [00:20<00:01, 62.7MB/s]     84%|████████████████████████████████▋      | 512M/611M [00:20<00:01, 62.8MB/s]     85%|█████████████████████████████████      | 518M/611M [00:20<00:01, 62.8MB/s]     86%|█████████████████████████████████▌     | 524M/611M [00:20<00:01, 63.1MB/s]     87%|█████████████████████████████████▉     | 531M/611M [00:20<00:01, 62.0MB/s]     88%|██████████████████████████████████▎    | 537M/611M [00:20<00:01, 61.0MB/s]     89%|██████████████████████████████████▋    | 543M/611M [00:21<00:01, 60.0MB/s]     90%|███████████████████████████████████    | 549M/611M [00:21<00:01, 59.8MB/s]     91%|███████████████████████████████████▍   | 555M/611M [00:21<00:00, 60.1MB/s]     92%|███████████████████████████████████▊   | 561M/611M [00:21<00:00, 59.8MB/s]     93%|████████████████████████████████████▏  | 567M/611M [00:21<00:00, 60.3MB/s]     94%|████████████████████████████████████▋  | 574M/611M [00:21<00:00, 61.2MB/s]     95%|█████████████████████████████████████  | 580M/611M [00:21<00:00, 61.1MB/s]     96%|█████████████████████████████████████▍ | 586M/611M [00:21<00:00, 60.5MB/s]     97%|█████████████████████████████████████▊ | 592M/611M [00:21<00:00, 60.2MB/s]     98%|██████████████████████████████████████▏| 598M/611M [00:21<00:00, 60.0MB/s]     99%|██████████████████████████████████████▌| 604M/611M [00:22<00:00, 59.6MB/s]    100%|██████████████████████████████████████▉| 610M/611M [00:22<00:00, 59.7MB/s]      0%|                                               | 0.00/611M [00:00<?, ?B/s]    100%|███████████████████████████████████████| 611M/611M [00:00<00:00, 1.05TB/s]
    Attempting to create new mne-python configuration file:
    /github/home/.mne/mne-python.json
    Opening raw data file /github/home/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_meg.fif...
        Range : 237600 ... 506999 =    791.189 ...  1688.266 secs
    Ready.
    Reading 0 ... 269399  =      0.000 ...   897.077 secs...
    Setting up band-stop filter

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandstop filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower transition bandwidth: 0.50 Hz
    - Upper transition bandwidth: 0.50 Hz
    - Filter length: 1983 samples (6.603 sec)

    Filtering raw data in 1 contiguous segment
    Setting up high-pass filter at 2 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal highpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 2.00
    - Lower transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 1.00 Hz)
    - Filter length: 497 samples (1.655 sec)

    111 events found
    Event IDs: [1]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-3.9992341833870637, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1202 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    5 bad epochs dropped
    Computing rank from data with rank=None
        Using tolerance 7.5e-09 (2.2e-16 eps * 204 dim * 1.7e+05  max singular value)
        Estimated rank (grad): 204
        GRAD: rank 204 computed from 204 data channels with 0 projectors
    /github/workspace/alphacsc/datasets/mne_data.py:94: RuntimeWarning: Something went wrong in the data-driven estimation of the data rank as it exceeds the theoretical rank from the info (204 > 64). Consider setting rank to "auto" or setting it explicitly as an integer.
      cov = mne.compute_covariance(epochs_cov)
    Reducing data rank from 204 -> 204
    Estimating covariance using EMPIRICAL
    Done.
    Number of samples used : 127412
    [done]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-2.001282051803185, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1803 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    8 bad epochs dropped




.. GENERATED FROM PYTHON SOURCE LINES 67-68

Fit the model and learn rank1 atoms

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    cdl.fit(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ./github/workspace/alphacsc/utils/optim.py:136: DeprecationWarning: Please use `scalar_search_armijo` from the `scipy.optimize` namespace, the `scipy.optimize.linesearch` namespace is deprecated.
      step_size, obj_uv = optimize.linesearch.scalar_search_armijo(
    .............
    [BatchCDL] Converged after 14 iteration, (dz, du) = 8.570e-05, 8.726e-05
    [BatchCDL] Fit in 1060.7s

    <alphacsc.convolutional_dictionary_learning.BatchCDL object at 0x7f922c11fdc0>



.. GENERATED FROM PYTHON SOURCE LINES 71-73

Display the 4-th atom, which displays a :math:`\mu`-waveform in its temporal
pattern.

.. GENERATED FROM PYTHON SOURCE LINES 73-108

.. code-block:: default


    import mne
    import numpy as np
    import matplotlib.pyplot as plt

    i_atom = 4
    n_plots = 3
    figsize = (n_plots * 5, 5.5)
    fig, axes = plt.subplots(1, n_plots, figsize=figsize, squeeze=False)

    # Plot the spatial map of the learn atom using mne topomap
    ax = axes[0, 0]
    u_hat = cdl.u_hat_[i_atom]
    mne.viz.plot_topomap(u_hat, info, axes=ax, show=False)
    ax.set(title='Learned spatial pattern')

    # Plot the temporal pattern of the learn atom
    ax = axes[0, 1]
    v_hat = cdl.v_hat_[i_atom]
    t = np.arange(v_hat.size) / sfreq
    ax.plot(t, v_hat)
    ax.set(xlabel='Time (sec)', title='Learned temporal waveform')
    ax.grid(True)

    # Plot the psd of the time atom
    ax = axes[0, 2]
    psd = np.abs(np.fft.rfft(v_hat)) ** 2
    frequencies = np.linspace(0, sfreq / 2.0, len(psd))
    ax.semilogy(frequencies, psd)
    ax.set(xlabel='Frequencies (Hz)', title='Power Spectral Density')
    ax.grid(True)
    ax.set_xlim(0, 30)

    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :alt: Learned spatial pattern, Learned temporal waveform, Power Spectral Density
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 18 minutes  33.360 seconds)


.. _sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_somato_mu_waves.py <plot_somato_mu_waves.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_somato_mu_waves.ipynb <plot_somato_mu_waves.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

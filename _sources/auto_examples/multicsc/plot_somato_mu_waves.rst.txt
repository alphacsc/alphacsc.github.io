
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multicsc/plot_somato_mu_waves.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multicsc_plot_somato_mu_waves.py:


===========================================================
Extracting :math:`\mu`-wave from the somato-sensory dataset
===========================================================

This example illustrates how to learn rank-1 atoms [1]_ on the multivariate
somato-sensorymotor dataset from :code:`mne`. The displayed results highlight
the presence of :math:`\mu`-waves located in the SI cortex.

.. [1] Dupré La Tour, T., Moreau, T., Jas, M., & Gramfort, A. (2018).
    `Multivariate Convolutional Sparse Coding for Electromagnetic Brain Signals
    <https://arxiv.org/abs/1805.09654v2>`_. Advances in Neural Information
    Processing Systems (NIPS).

.. GENERATED FROM PYTHON SOURCE LINES 15-23

.. code-block:: default


    # Authors: Thomas Moreau <thomas.moreau@inria.fr>
    #          Mainak Jas <mainak.jas@telecom-paristech.fr>
    #          Tom Dupre La Tour <tom.duprelatour@telecom-paristech.fr>
    #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Let us first define the parameters of our model.

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default


    sfreq = 150.

    # Define the shape of the dictionary
    n_atoms = 25
    n_times_atom = int(round(sfreq * 1.0))  # 1000. ms








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Next, we define the parameters for multivariate CSC

.. GENERATED FROM PYTHON SOURCE LINES 34-56

.. code-block:: default


    from alphacsc import BatchCDL
    cdl = BatchCDL(
        # Shape of the dictionary
        n_atoms=n_atoms,
        n_times_atom=n_times_atom,
        # Request a rank1 dictionary with unit norm temporal and spatial maps
        rank1=True, uv_constraint='separate',
        # Initialize the dictionary with random chunk from the data
        D_init='chunk',
        # rescale the regularization parameter to be 20% of lambda_max
        lmbd_max="scaled", reg=.2,
        # Number of iteration for the alternate minimization and cvg threshold
        n_iter=100, eps=1e-4,
        # solver for the z-step
        solver_z="lgcd", solver_z_kwargs={'tol': 1e-2, 'max_iter': 1000},
        # solver for the d-step
        solver_d='alternate_adaptive', solver_d_kwargs={'max_iter': 300},
        # Technical parameters
        verbose=1, random_state=0, n_jobs=6)









.. GENERATED FROM PYTHON SOURCE LINES 57-60

Here, we load the data from the somato-sensory dataset and preprocess them
in epochs. The epochs are selected around the stim, starting 2 seconds
before and finishing 4 seconds after.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default


    from alphacsc.datasets.mne_data import load_data
    t_lim = (-2, 4)
    X, info = load_data(dataset='somato', epoch=t_lim, sfreq=sfreq)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for somato...
      0%|                                               | 0.00/611M [00:00<?, ?B/s]      0%|▏                                     | 2.65M/611M [00:00<00:24, 24.4MB/s]      1%|▍                                     | 6.58M/611M [00:00<00:23, 25.8MB/s]      1%|▌                                     | 9.14M/611M [00:00<00:25, 23.9MB/s]      2%|▊                                     | 12.1M/611M [00:00<00:24, 24.2MB/s]      2%|▉                                     | 14.7M/611M [00:00<00:24, 24.2MB/s]      3%|█                                     | 17.1M/611M [00:00<00:26, 22.0MB/s]      3%|█▏                                    | 20.0M/611M [00:00<00:24, 24.1MB/s]      4%|█▌                                    | 24.2M/611M [00:00<00:20, 29.3MB/s]      4%|█▋                                    | 27.3M/611M [00:01<00:21, 27.2MB/s]      5%|█▊                                    | 30.0M/611M [00:01<00:22, 25.3MB/s]      6%|██▏                                   | 35.3M/611M [00:01<00:17, 32.4MB/s]      6%|██▍                                   | 38.7M/611M [00:01<00:18, 31.1MB/s]      7%|██▌                                   | 41.9M/611M [00:01<00:21, 27.0MB/s]      7%|██▊                                   | 44.7M/611M [00:01<00:21, 26.6MB/s]      8%|██▉                                   | 47.5M/611M [00:01<00:23, 23.5MB/s]      8%|███▏                                  | 50.2M/611M [00:01<00:22, 24.4MB/s]      9%|███▎                                  | 52.8M/611M [00:02<00:23, 23.5MB/s]      9%|███▍                                  | 55.2M/611M [00:02<00:23, 23.4MB/s]      9%|███▌                                  | 57.6M/611M [00:02<00:25, 21.9MB/s]     10%|███▊                                  | 60.4M/611M [00:02<00:23, 23.1MB/s]     10%|███▉                                  | 62.8M/611M [00:02<00:24, 22.7MB/s]     11%|████                                  | 65.1M/611M [00:02<00:24, 22.6MB/s]     11%|████▏                                 | 67.4M/611M [00:02<00:25, 21.6MB/s]     12%|████▍                                 | 70.4M/611M [00:02<00:22, 24.2MB/s]     12%|████▌                                 | 73.5M/611M [00:02<00:20, 26.0MB/s]     13%|████▊                                 | 77.2M/611M [00:03<00:18, 29.0MB/s]     13%|█████                                 | 80.6M/611M [00:03<00:17, 30.1MB/s]     14%|█████▏                                | 83.7M/611M [00:03<00:18, 29.1MB/s]     14%|█████▍                                | 87.1M/611M [00:03<00:17, 30.5MB/s]     15%|█████▋                                | 90.5M/611M [00:03<00:17, 29.0MB/s]     15%|█████▊                                | 93.4M/611M [00:03<00:19, 26.1MB/s]     16%|█████▉                                | 96.1M/611M [00:03<00:19, 25.8MB/s]     16%|██████▏                               | 98.7M/611M [00:03<00:20, 25.5MB/s]     17%|██████▍                                | 101M/611M [00:03<00:22, 22.7MB/s]     17%|██████▌                                | 104M/611M [00:04<00:22, 22.1MB/s]     17%|██████▊                                | 106M/611M [00:04<00:23, 21.4MB/s]     18%|██████▉                                | 108M/611M [00:04<00:23, 21.4MB/s]     18%|███████                                | 111M/611M [00:04<00:21, 23.7MB/s]     19%|███████▎                               | 114M/611M [00:04<00:21, 23.2MB/s]     19%|███████▍                               | 117M/611M [00:04<00:19, 25.3MB/s]     20%|███████▋                               | 119M/611M [00:04<00:19, 25.3MB/s]     20%|███████▊                               | 122M/611M [00:04<00:18, 26.2MB/s]     20%|███████▉                               | 125M/611M [00:05<00:22, 21.3MB/s]     21%|████████▏                              | 127M/611M [00:05<00:24, 19.3MB/s]     21%|████████▎                              | 129M/611M [00:05<00:27, 17.4MB/s]     22%|████████▍                              | 131M/611M [00:05<00:26, 17.9MB/s]     22%|████████▌                              | 134M/611M [00:05<00:23, 19.9MB/s]     22%|████████▋                              | 137M/611M [00:05<00:22, 21.5MB/s]     23%|████████▉                              | 140M/611M [00:05<00:19, 24.4MB/s]     23%|█████████▏                             | 143M/611M [00:05<00:17, 26.5MB/s]     24%|█████████▎                             | 147M/611M [00:05<00:16, 28.6MB/s]     25%|█████████▋                             | 151M/611M [00:06<00:13, 33.5MB/s]     25%|█████████▉                             | 155M/611M [00:06<00:14, 30.7MB/s]     26%|██████████▎                            | 161M/611M [00:06<00:11, 40.6MB/s]     27%|██████████▌                            | 165M/611M [00:06<00:12, 34.3MB/s]     28%|██████████▉                            | 172M/611M [00:06<00:10, 42.0MB/s]     29%|███████████▎                           | 176M/611M [00:06<00:13, 31.6MB/s]     30%|███████████▌                           | 180M/611M [00:06<00:16, 26.1MB/s]     30%|███████████▋                           | 183M/611M [00:07<00:19, 22.0MB/s]     30%|███████████▉                           | 186M/611M [00:07<00:18, 23.2MB/s]     31%|████████████                           | 189M/611M [00:07<00:17, 23.8MB/s]     32%|████████████▎                          | 192M/611M [00:07<00:15, 26.4MB/s]     32%|████████████▍                          | 195M/611M [00:07<00:15, 26.1MB/s]     33%|████████████▋                          | 199M/611M [00:07<00:15, 26.5MB/s]     33%|████████████▉                          | 203M/611M [00:07<00:13, 30.7MB/s]     34%|█████████████▏                         | 207M/611M [00:07<00:13, 29.2MB/s]     34%|█████████████▍                         | 210M/611M [00:08<00:14, 28.4MB/s]     35%|█████████████▌                         | 213M/611M [00:08<00:16, 23.5MB/s]     35%|█████████████▋                         | 215M/611M [00:08<00:19, 20.3MB/s]     36%|█████████████▉                         | 217M/611M [00:08<00:20, 19.5MB/s]     36%|██████████████                         | 220M/611M [00:08<00:18, 21.3MB/s]     37%|██████████████▎                        | 224M/611M [00:08<00:15, 24.3MB/s]     37%|██████████████▍                        | 227M/611M [00:08<00:14, 25.9MB/s]     38%|██████████████▋                        | 231M/611M [00:09<00:12, 29.5MB/s]     38%|██████████████▉                        | 234M/611M [00:09<00:11, 31.4MB/s]     39%|███████████████▏                       | 238M/611M [00:09<00:12, 29.4MB/s]     40%|███████████████▍                       | 242M/611M [00:09<00:10, 34.9MB/s]     40%|███████████████▋                       | 246M/611M [00:09<00:10, 35.1MB/s]     41%|███████████████▉                       | 250M/611M [00:09<00:11, 32.6MB/s]     41%|████████████████▏                      | 253M/611M [00:09<00:11, 32.3MB/s]     42%|████████████████▍                      | 258M/611M [00:09<00:09, 36.1MB/s]     43%|████████████████▋                      | 262M/611M [00:09<00:09, 35.1MB/s]     43%|████████████████▉                      | 265M/611M [00:10<00:10, 34.0MB/s]     44%|█████████████████▏                     | 269M/611M [00:10<00:11, 30.8MB/s]     45%|█████████████████▍                     | 272M/611M [00:10<00:12, 27.3MB/s]     46%|█████████████████▊                     | 279M/611M [00:10<00:09, 36.2MB/s]     46%|██████████████████                     | 282M/611M [00:10<00:10, 31.3MB/s]     47%|██████████████████▎                    | 286M/611M [00:10<00:10, 30.1MB/s]     47%|██████████████████▍                    | 289M/611M [00:10<00:13, 23.9MB/s]     48%|██████████████████▊                    | 295M/611M [00:11<00:09, 31.7MB/s]     49%|███████████████████▎                   | 302M/611M [00:11<00:07, 40.4MB/s]     50%|███████████████████▌                   | 307M/611M [00:11<00:08, 36.3MB/s]     51%|███████████████████▊                   | 311M/611M [00:11<00:07, 37.8MB/s]     52%|████████████████████▏                  | 315M/611M [00:11<00:08, 34.3MB/s]     52%|████████████████████▎                  | 319M/611M [00:11<00:08, 34.0MB/s]     53%|████████████████████▌                  | 323M/611M [00:11<00:08, 34.2MB/s]     53%|████████████████████▊                  | 326M/611M [00:11<00:09, 31.5MB/s]     54%|█████████████████████                  | 330M/611M [00:12<00:12, 23.3MB/s]     55%|█████████████████████▍                 | 336M/611M [00:12<00:08, 31.1MB/s]     56%|█████████████████████▊                 | 342M/611M [00:12<00:09, 29.2MB/s]     57%|██████████████████████▎                | 348M/611M [00:12<00:07, 35.6MB/s]     58%|██████████████████████▋                | 355M/611M [00:12<00:05, 42.8MB/s]     59%|███████████████████████                | 360M/611M [00:12<00:05, 43.1MB/s]     60%|███████████████████████▎               | 365M/611M [00:12<00:05, 44.5MB/s]     61%|███████████████████████▋               | 370M/611M [00:13<00:05, 42.4MB/s]     61%|███████████████████████▉               | 374M/611M [00:13<00:05, 42.6MB/s]     62%|████████████████████████▏              | 379M/611M [00:13<00:05, 40.2MB/s]     63%|████████████████████████▌              | 384M/611M [00:13<00:05, 42.6MB/s]     64%|████████████████████████▊              | 388M/611M [00:13<00:05, 42.9MB/s]     64%|█████████████████████████              | 393M/611M [00:13<00:05, 43.3MB/s]     65%|█████████████████████████▍             | 398M/611M [00:13<00:04, 45.2MB/s]     66%|█████████████████████████▋             | 402M/611M [00:13<00:04, 44.5MB/s]     67%|█████████████████████████▉             | 407M/611M [00:13<00:06, 32.4MB/s]     68%|██████████████████████████▍            | 413M/611M [00:14<00:04, 40.2MB/s]     69%|██████████████████████████▊            | 420M/611M [00:14<00:04, 47.4MB/s]     70%|███████████████████████████▏           | 426M/611M [00:14<00:04, 45.4MB/s]     71%|███████████████████████████▌           | 431M/611M [00:14<00:03, 47.1MB/s]     72%|███████████████████████████▉           | 437M/611M [00:14<00:03, 49.9MB/s]     72%|████████████████████████████▏          | 442M/611M [00:14<00:03, 49.2MB/s]     73%|████████████████████████████▌          | 447M/611M [00:14<00:03, 48.8MB/s]     74%|████████████████████████████▉          | 453M/611M [00:14<00:03, 51.4MB/s]     75%|█████████████████████████████▎         | 458M/611M [00:14<00:03, 48.9MB/s]     76%|█████████████████████████████▌         | 463M/611M [00:15<00:02, 50.4MB/s]     77%|█████████████████████████████▉         | 469M/611M [00:15<00:03, 44.7MB/s]     78%|██████████████████████████████▎        | 475M/611M [00:15<00:02, 50.1MB/s]     79%|██████████████████████████████▋        | 481M/611M [00:15<00:02, 52.1MB/s]     80%|███████████████████████████████        | 486M/611M [00:15<00:02, 50.1MB/s]     80%|███████████████████████████████▍       | 491M/611M [00:15<00:02, 41.0MB/s]     82%|███████████████████████████████▊       | 498M/611M [00:15<00:02, 47.4MB/s]     83%|████████████████████████████████▏      | 505M/611M [00:15<00:02, 52.7MB/s]     84%|████████████████████████████████▌      | 510M/611M [00:16<00:02, 49.8MB/s]     84%|████████████████████████████████▉      | 516M/611M [00:16<00:02, 45.9MB/s]     85%|█████████████████████████████████▏     | 520M/611M [00:16<00:02, 43.4MB/s]     86%|█████████████████████████████████▌     | 525M/611M [00:16<00:02, 36.3MB/s]     87%|█████████████████████████████████▊     | 529M/611M [00:16<00:02, 34.3MB/s]     88%|██████████████████████████████████▏    | 536M/611M [00:16<00:01, 41.8MB/s]     89%|██████████████████████████████████▌    | 541M/611M [00:16<00:01, 44.9MB/s]     89%|██████████████████████████████████▊    | 546M/611M [00:16<00:01, 42.7MB/s]     90%|███████████████████████████████████▏   | 551M/611M [00:17<00:01, 45.4MB/s]     91%|███████████████████████████████████▌   | 556M/611M [00:17<00:01, 46.1MB/s]     92%|███████████████████████████████████▉   | 562M/611M [00:17<00:00, 49.2MB/s]     93%|████████████████████████████████████▏  | 567M/611M [00:17<00:00, 47.0MB/s]     94%|████████████████████████████████████▌  | 571M/611M [00:17<00:00, 44.2MB/s]     94%|████████████████████████████████████▊  | 576M/611M [00:17<00:00, 43.4MB/s]     95%|█████████████████████████████████████  | 580M/611M [00:17<00:00, 42.4MB/s]     96%|█████████████████████████████████████▍ | 586M/611M [00:17<00:00, 45.2MB/s]     97%|█████████████████████████████████████▊ | 592M/611M [00:17<00:00, 49.2MB/s]     98%|██████████████████████████████████████▏| 598M/611M [00:18<00:00, 52.4MB/s]     99%|██████████████████████████████████████▌| 603M/611M [00:18<00:00, 52.5MB/s]    100%|██████████████████████████████████████▊| 608M/611M [00:18<00:00, 49.7MB/s]      0%|                                               | 0.00/611M [00:00<?, ?B/s]    100%|████████████████████████████████████████| 611M/611M [00:00<00:00, 884GB/s]
    Attempting to create new mne-python configuration file:
    /github/home/.mne/mne-python.json
    Opening raw data file /github/home/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_meg.fif...
        Range : 237600 ... 506999 =    791.189 ...  1688.266 secs
    Ready.
    Reading 0 ... 269399  =      0.000 ...   897.077 secs...
    Setting up band-stop filter

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandstop filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower transition bandwidth: 0.50 Hz
    - Upper transition bandwidth: 0.50 Hz
    - Filter length: 1983 samples (6.603 sec)

    Filtering raw data in 1 contiguous segment
    Setting up high-pass filter at 2 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal highpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 2.00
    - Lower transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 1.00 Hz)
    - Filter length: 497 samples (1.655 sec)

    111 events found
    Event IDs: [1]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-3.9992341833870637, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1202 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    5 bad epochs dropped
    Computing rank from data with rank=None
        Using tolerance 7.5e-09 (2.2e-16 eps * 204 dim * 1.7e+05  max singular value)
        Estimated rank (grad): 204
        GRAD: rank 204 computed from 204 data channels with 0 projectors
    /github/workspace/alphacsc/datasets/mne_data.py:94: RuntimeWarning: Something went wrong in the data-driven estimation of the data rank as it exceeds the theoretical rank from the info (204 > 64). Consider setting rank to "auto" or setting it explicitly as an integer.
      cov = mne.compute_covariance(epochs_cov)
    Reducing data rank from 204 -> 204
    Estimating covariance using EMPIRICAL
    Done.
    Number of samples used : 127412
    [done]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-2.001282051803185, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1803 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    8 bad epochs dropped




.. GENERATED FROM PYTHON SOURCE LINES 67-68

Fit the model and learn rank1 atoms

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    cdl.fit(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ..............
    [BatchCDL] Converged after 14 iteration, (dz, du) = 8.570e-05, 8.726e-05
    [BatchCDL] Fit in 858.0s

    <alphacsc.convolutional_dictionary_learning.BatchCDL object at 0x7ff484bfe7f0>



.. GENERATED FROM PYTHON SOURCE LINES 71-73

Display the 4-th atom, which displays a :math:`\mu`-waveform in its temporal
pattern.

.. GENERATED FROM PYTHON SOURCE LINES 73-108

.. code-block:: default


    import mne
    import numpy as np
    import matplotlib.pyplot as plt

    i_atom = 4
    n_plots = 3
    figsize = (n_plots * 5, 5.5)
    fig, axes = plt.subplots(1, n_plots, figsize=figsize, squeeze=False)

    # Plot the spatial map of the learn atom using mne topomap
    ax = axes[0, 0]
    u_hat = cdl.u_hat_[i_atom]
    mne.viz.plot_topomap(u_hat, info, axes=ax, show=False)
    ax.set(title='Learned spatial pattern')

    # Plot the temporal pattern of the learn atom
    ax = axes[0, 1]
    v_hat = cdl.v_hat_[i_atom]
    t = np.arange(v_hat.size) / sfreq
    ax.plot(t, v_hat)
    ax.set(xlabel='Time (sec)', title='Learned temporal waveform')
    ax.grid(True)

    # Plot the psd of the time atom
    ax = axes[0, 2]
    psd = np.abs(np.fft.rfft(v_hat)) ** 2
    frequencies = np.linspace(0, sfreq / 2.0, len(psd))
    ax.semilogy(frequencies, psd)
    ax.set(xlabel='Frequencies (Hz)', title='Power Spectral Density')
    ax.grid(True)
    ax.set_xlim(0, 30)

    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :alt: Learned spatial pattern, Learned temporal waveform, Power Spectral Density
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 15 minutes  4.006 seconds)


.. _sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_somato_mu_waves.py <plot_somato_mu_waves.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_somato_mu_waves.ipynb <plot_somato_mu_waves.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

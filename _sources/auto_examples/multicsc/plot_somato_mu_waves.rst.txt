
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multicsc/plot_somato_mu_waves.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multicsc_plot_somato_mu_waves.py:


===========================================================
Extracting :math:`\mu`-wave from the somato-sensory dataset
===========================================================

This example illustrates how to learn rank-1 atoms [1]_ on the multivariate
somato-sensorymotor dataset from :code:`mne`. The displayed results highlight
the presence of :math:`\mu`-waves located in the SI cortex.

.. [1] Dupré La Tour, T., Moreau, T., Jas, M., & Gramfort, A. (2018).
    `Multivariate Convolutional Sparse Coding for Electromagnetic Brain Signals
    <https://arxiv.org/abs/1805.09654v2>`_. Advances in Neural Information
    Processing Systems (NIPS).

.. GENERATED FROM PYTHON SOURCE LINES 15-23

.. code-block:: default


    # Authors: Thomas Moreau <thomas.moreau@inria.fr>
    #          Mainak Jas <mainak.jas@telecom-paristech.fr>
    #          Tom Dupre La Tour <tom.duprelatour@telecom-paristech.fr>
    #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Let us first define the parameters of our model.

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default


    sfreq = 150.

    # Define the shape of the dictionary
    n_atoms = 25
    n_times_atom = int(round(sfreq * 1.0))  # 1000. ms








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Next, we define the parameters for multivariate CSC

.. GENERATED FROM PYTHON SOURCE LINES 34-56

.. code-block:: default


    from alphacsc import BatchCDL
    cdl = BatchCDL(
        # Shape of the dictionary
        n_atoms=n_atoms,
        n_times_atom=n_times_atom,
        # Request a rank1 dictionary with unit norm temporal and spatial maps
        rank1=True, uv_constraint='separate',
        # Initialize the dictionary with random chunk from the data
        D_init='chunk',
        # rescale the regularization parameter to be 20% of lambda_max
        lmbd_max="scaled", reg=.2,
        # Number of iteration for the alternate minimization and cvg threshold
        n_iter=100, eps=1e-4,
        # solver for the z-step
        solver_z="lgcd", solver_z_kwargs={'tol': 1e-2, 'max_iter': 1000},
        # solver for the d-step
        solver_d='alternate_adaptive', solver_d_kwargs={'max_iter': 300},
        # Technical parameters
        verbose=1, random_state=0, n_jobs=6)









.. GENERATED FROM PYTHON SOURCE LINES 57-60

Here, we load the data from the somato-sensory dataset and preprocess them
in epochs. The epochs are selected around the stim, starting 2 seconds
before and finishing 4 seconds after.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default


    from alphacsc.datasets.mne_data import load_data
    t_lim = (-2, 4)
    X, info = load_data(dataset='somato', epoch=t_lim, sfreq=sfreq)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for somato...
      0%|                                               | 0.00/611M [00:00<?, ?B/s]      0%|▏                                     | 2.69M/611M [00:00<00:22, 26.9MB/s]      1%|▎                                     | 5.38M/611M [00:00<00:52, 11.5MB/s]      1%|▍                                     | 6.97M/611M [00:00<01:00, 9.99MB/s]      1%|▌                                     | 8.19M/611M [00:00<01:01, 9.78MB/s]      2%|▌                                     | 9.45M/611M [00:00<00:57, 10.4MB/s]      2%|▋                                     | 10.8M/611M [00:00<00:56, 10.7MB/s]      2%|▊                                     | 13.0M/611M [00:01<00:43, 13.6MB/s]      3%|█▏                                    | 18.5M/611M [00:01<00:23, 24.8MB/s]      4%|█▍                                    | 24.1M/611M [00:01<00:17, 33.3MB/s]      5%|█▊                                    | 29.9M/611M [00:01<00:14, 40.3MB/s]      6%|██▏                                   | 34.2M/611M [00:01<00:19, 29.8MB/s]      6%|██▎                                   | 37.7M/611M [00:01<00:26, 21.5MB/s]      7%|██▌                                   | 40.6M/611M [00:02<00:25, 22.4MB/s]      8%|██▊                                   | 45.8M/611M [00:02<00:19, 28.7MB/s]      8%|███▏                                  | 51.5M/611M [00:02<00:15, 35.1MB/s]      9%|███▌                                  | 57.4M/611M [00:02<00:13, 41.0MB/s]     10%|███▉                                  | 63.4M/611M [00:02<00:11, 45.8MB/s]     11%|████▎                                 | 69.2M/611M [00:02<00:10, 49.3MB/s]     12%|████▋                                 | 75.1M/611M [00:02<00:10, 51.9MB/s]     13%|█████                                 | 80.9M/611M [00:02<00:09, 53.6MB/s]     14%|█████▍                                | 86.8M/611M [00:02<00:09, 55.3MB/s]     15%|█████▊                                | 92.8M/611M [00:02<00:09, 56.6MB/s]     16%|██████▏                               | 98.8M/611M [00:03<00:08, 57.5MB/s]     17%|██████▋                                | 105M/611M [00:03<00:08, 58.0MB/s]     18%|███████                                | 111M/611M [00:03<00:08, 58.6MB/s]     19%|███████▍                               | 117M/611M [00:03<00:08, 59.2MB/s]     20%|███████▊                               | 123M/611M [00:03<00:08, 60.0MB/s]     21%|████████▏                              | 129M/611M [00:03<00:08, 59.5MB/s]     22%|████████▌                              | 135M/611M [00:04<00:19, 24.3MB/s]     23%|████████▉                              | 139M/611M [00:04<00:20, 22.5MB/s]     24%|█████████▎                             | 145M/611M [00:04<00:17, 27.3MB/s]     25%|█████████▋                             | 151M/611M [00:04<00:13, 33.0MB/s]     25%|█████████▉                             | 156M/611M [00:04<00:16, 27.9MB/s]     26%|██████████▏                            | 160M/611M [00:05<00:25, 17.5MB/s]     27%|██████████▍                            | 163M/611M [00:05<00:33, 13.4MB/s]     27%|██████████▌                            | 166M/611M [00:05<00:29, 15.3MB/s]     28%|██████████▊                            | 169M/611M [00:05<00:25, 17.4MB/s]     28%|██████████▉                            | 171M/611M [00:06<00:35, 12.3MB/s]     28%|███████████                            | 173M/611M [00:06<00:42, 10.4MB/s]     29%|███████████▏                           | 175M/611M [00:06<00:44, 9.70MB/s]     29%|███████████▎                           | 176M/611M [00:07<00:46, 9.41MB/s]     29%|███████████▎                           | 177M/611M [00:07<00:50, 8.54MB/s]     29%|███████████▍                           | 178M/611M [00:07<00:53, 8.06MB/s]     30%|███████████▌                           | 181M/611M [00:07<00:40, 10.6MB/s]     31%|███████████▉                           | 186M/611M [00:07<00:21, 19.9MB/s]     31%|████████████                           | 189M/611M [00:07<00:28, 15.0MB/s]     31%|████████████▏                          | 191M/611M [00:08<00:33, 12.5MB/s]     32%|████████████▎                          | 193M/611M [00:08<00:35, 11.7MB/s]     32%|████████████▍                          | 194M/611M [00:08<00:40, 10.3MB/s]     32%|████████████▍                          | 196M/611M [00:08<00:42, 9.67MB/s]     32%|████████████▌                          | 197M/611M [00:08<00:43, 9.60MB/s]     33%|████████████▋                          | 199M/611M [00:08<00:31, 13.0MB/s]     34%|█████████████                          | 205M/611M [00:08<00:18, 22.0MB/s]     34%|█████████████▍                         | 210M/611M [00:09<00:13, 30.5MB/s]     35%|█████████████▋                         | 214M/611M [00:09<00:21, 18.8MB/s]     36%|█████████████▊                         | 217M/611M [00:09<00:29, 13.5MB/s]     36%|█████████████▉                         | 219M/611M [00:10<00:33, 11.7MB/s]     36%|██████████████                         | 221M/611M [00:10<00:31, 12.3MB/s]     37%|██████████████▍                        | 226M/611M [00:10<00:20, 18.9MB/s]     38%|██████████████▋                        | 231M/611M [00:10<00:16, 23.6MB/s]     38%|██████████████▉                        | 234M/611M [00:10<00:28, 13.4MB/s]     39%|███████████████                        | 236M/611M [00:11<00:34, 11.0MB/s]     39%|███████████████▏                       | 238M/611M [00:11<00:37, 9.96MB/s]     39%|███████████████▎                       | 240M/611M [00:11<00:39, 9.50MB/s]     40%|███████████████▌                       | 244M/611M [00:11<00:25, 14.6MB/s]     41%|███████████████▉                       | 250M/611M [00:11<00:17, 21.0MB/s]     42%|████████████████▎                      | 255M/611M [00:12<00:12, 27.5MB/s]     43%|████████████████▋                      | 261M/611M [00:12<00:10, 34.4MB/s]     44%|█████████████████                      | 267M/611M [00:12<00:08, 40.5MB/s]     45%|█████████████████▍                     | 273M/611M [00:12<00:07, 45.4MB/s]     46%|█████████████████▊                     | 279M/611M [00:12<00:06, 48.8MB/s]     47%|██████████████████▏                    | 284M/611M [00:12<00:06, 50.1MB/s]     47%|██████████████████▍                    | 290M/611M [00:12<00:08, 39.3MB/s]     48%|██████████████████▊                    | 294M/611M [00:13<00:11, 26.6MB/s]     49%|███████████████████                    | 298M/611M [00:13<00:17, 17.6MB/s]     49%|███████████████████▏                   | 301M/611M [00:13<00:20, 14.8MB/s]     50%|███████████████████▍                   | 305M/611M [00:13<00:16, 18.7MB/s]     51%|███████████████████▊                   | 311M/611M [00:14<00:12, 24.8MB/s]     52%|████████████████████▏                  | 317M/611M [00:14<00:09, 31.3MB/s]     53%|████████████████████▌                  | 323M/611M [00:14<00:07, 37.5MB/s]     54%|████████████████████▉                  | 329M/611M [00:14<00:06, 42.7MB/s]     55%|█████████████████████▍                 | 335M/611M [00:14<00:05, 47.3MB/s]     56%|█████████████████████▊                 | 341M/611M [00:14<00:05, 50.7MB/s]     57%|██████████████████████▏                | 347M/611M [00:14<00:04, 53.7MB/s]     58%|██████████████████████▌                | 353M/611M [00:14<00:04, 55.8MB/s]     59%|██████████████████████▉                | 359M/611M [00:14<00:04, 56.6MB/s]     60%|███████████████████████▎               | 365M/611M [00:14<00:04, 57.9MB/s]     61%|███████████████████████▋               | 371M/611M [00:15<00:05, 40.3MB/s]     62%|████████████████████████               | 376M/611M [00:16<00:14, 16.2MB/s]     62%|████████████████████████▏              | 380M/611M [00:16<00:18, 12.6MB/s]     63%|████████████████████████▍              | 383M/611M [00:16<00:15, 14.6MB/s]     63%|████████████████████████▋              | 386M/611M [00:16<00:13, 16.5MB/s]     64%|████████████████████████▊              | 389M/611M [00:17<00:20, 10.9MB/s]     64%|████████████████████████▉              | 391M/611M [00:17<00:22, 9.86MB/s]     64%|█████████████████████████              | 393M/611M [00:17<00:23, 9.34MB/s]     65%|█████████████████████████▏             | 394M/611M [00:18<00:25, 8.43MB/s]     65%|█████████████████████████▎             | 395M/611M [00:18<00:27, 7.93MB/s]     65%|█████████████████████████▍             | 399M/611M [00:18<00:18, 11.6MB/s]     66%|█████████████████████████▊             | 403M/611M [00:18<00:12, 16.9MB/s]     67%|██████████████████████████             | 409M/611M [00:18<00:08, 24.3MB/s]     68%|██████████████████████████▍            | 415M/611M [00:18<00:06, 31.7MB/s]     69%|██████████████████████████▊            | 419M/611M [00:18<00:05, 33.1MB/s]     69%|███████████████████████████            | 423M/611M [00:18<00:05, 36.4MB/s]     70%|███████████████████████████▎           | 428M/611M [00:19<00:08, 20.7MB/s]     71%|███████████████████████████▌           | 431M/611M [00:19<00:14, 12.6MB/s]     71%|███████████████████████████▋           | 433M/611M [00:20<00:16, 10.7MB/s]     71%|███████████████████████████▊           | 435M/611M [00:20<00:14, 11.8MB/s]     72%|████████████████████████████▏          | 441M/611M [00:20<00:09, 17.5MB/s]     73%|████████████████████████████▍          | 445M/611M [00:20<00:07, 21.3MB/s]     73%|████████████████████████████▌          | 448M/611M [00:21<00:11, 14.4MB/s]     74%|████████████████████████████▊          | 450M/611M [00:21<00:13, 11.7MB/s]     74%|████████████████████████████▉          | 452M/611M [00:21<00:14, 10.9MB/s]     74%|█████████████████████████████          | 454M/611M [00:21<00:14, 10.8MB/s]     75%|█████████████████████████████▎         | 459M/611M [00:21<00:08, 17.3MB/s]     76%|█████████████████████████████▋         | 464M/611M [00:21<00:06, 22.9MB/s]     77%|█████████████████████████████▊         | 467M/611M [00:22<00:05, 24.2MB/s]     77%|██████████████████████████████         | 471M/611M [00:22<00:10, 13.4MB/s]     77%|██████████████████████████████▏        | 473M/611M [00:22<00:12, 10.9MB/s]     78%|██████████████████████████████▎        | 475M/611M [00:23<00:12, 10.6MB/s]     78%|██████████████████████████████▍        | 476M/611M [00:23<00:12, 10.9MB/s]     79%|██████████████████████████████▋        | 481M/611M [00:23<00:07, 17.1MB/s]     80%|███████████████████████████████        | 487M/611M [00:23<00:04, 24.7MB/s]     81%|███████████████████████████████▍       | 493M/611M [00:23<00:03, 31.6MB/s]     82%|███████████████████████████████▊       | 499M/611M [00:23<00:02, 37.8MB/s]     83%|████████████████████████████████▏      | 505M/611M [00:23<00:02, 43.2MB/s]     83%|████████████████████████████████▌      | 510M/611M [00:23<00:02, 44.6MB/s]     84%|████████████████████████████████▉      | 515M/611M [00:24<00:04, 19.5MB/s]     85%|█████████████████████████████████      | 518M/611M [00:24<00:06, 14.9MB/s]     85%|█████████████████████████████████▎     | 521M/611M [00:25<00:05, 15.4MB/s]     86%|█████████████████████████████████▋     | 527M/611M [00:25<00:04, 20.5MB/s]     87%|██████████████████████████████████     | 532M/611M [00:25<00:02, 26.7MB/s]     88%|██████████████████████████████████▎    | 536M/611M [00:25<00:04, 17.0MB/s]     88%|██████████████████████████████████▍    | 540M/611M [00:26<00:05, 13.0MB/s]     89%|██████████████████████████████████▌    | 542M/611M [00:26<00:05, 12.4MB/s]     90%|██████████████████████████████████▉    | 547M/611M [00:26<00:03, 17.4MB/s]     91%|███████████████████████████████████▎   | 553M/611M [00:26<00:02, 23.0MB/s]     91%|███████████████████████████████████▌   | 556M/611M [00:27<00:03, 16.8MB/s]     92%|███████████████████████████████████▋   | 559M/611M [00:27<00:03, 14.1MB/s]     92%|███████████████████████████████████▊   | 561M/611M [00:27<00:03, 12.4MB/s]     92%|███████████████████████████████████▉   | 563M/611M [00:27<00:03, 13.6MB/s]     93%|████████████████████████████████████▎  | 569M/611M [00:27<00:02, 19.8MB/s]     94%|████████████████████████████████████▋  | 574M/611M [00:27<00:01, 26.4MB/s]     95%|█████████████████████████████████████  | 580M/611M [00:27<00:00, 32.9MB/s]     96%|█████████████████████████████████████▎ | 584M/611M [00:28<00:00, 34.5MB/s]     96%|█████████████████████████████████████▌ | 589M/611M [00:28<00:00, 37.3MB/s]     97%|█████████████████████████████████████▉ | 593M/611M [00:28<00:00, 29.3MB/s]     98%|██████████████████████████████████████ | 597M/611M [00:28<00:00, 29.2MB/s]     98%|██████████████████████████████████████▎| 600M/611M [00:28<00:00, 28.8MB/s]     99%|██████████████████████████████████████▌| 603M/611M [00:28<00:00, 29.1MB/s]     99%|██████████████████████████████████████▋| 606M/611M [00:28<00:00, 28.7MB/s]    100%|██████████████████████████████████████▉| 609M/611M [00:28<00:00, 29.5MB/s]      0%|                                               | 0.00/611M [00:00<?, ?B/s]    100%|████████████████████████████████████████| 611M/611M [00:00<00:00, 973GB/s]
    Attempting to create new mne-python configuration file:
    /github/home/.mne/mne-python.json
    Opening raw data file /github/home/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_meg.fif...
        Range : 237600 ... 506999 =    791.189 ...  1688.266 secs
    Ready.
    Reading 0 ... 269399  =      0.000 ...   897.077 secs...
    Setting up band-stop filter

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandstop filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower transition bandwidth: 0.50 Hz
    - Upper transition bandwidth: 0.50 Hz
    - Filter length: 1983 samples (6.603 sec)

    Filtering raw data in 1 contiguous segment
    Setting up high-pass filter at 2 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal highpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 2.00
    - Lower transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 1.00 Hz)
    - Filter length: 497 samples (1.655 sec)

    111 events found
    Event IDs: [1]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-3.9992341833870637, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1202 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    5 bad epochs dropped
    Computing rank from data with rank=None
        Using tolerance 7.5e-09 (2.2e-16 eps * 204 dim * 1.7e+05  max singular value)
        Estimated rank (grad): 204
        GRAD: rank 204 computed from 204 data channels with 0 projectors
    /github/workspace/alphacsc/datasets/mne_data.py:94: RuntimeWarning: Something went wrong in the data-driven estimation of the data rank as it exceeds the theoretical rank from the info (204 > 64). Consider setting rank to "auto" or setting it explicitly as an integer.
      cov = mne.compute_covariance(epochs_cov)
    Reducing data rank from 204 -> 204
    Estimating covariance using EMPIRICAL
    Done.
    Number of samples used : 127412
    [done]
    Not setting metadata
    111 matching events found
    Setting baseline interval to [-2.001282051803185, 0.0] sec
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 111 events and 1803 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    8 bad epochs dropped




.. GENERATED FROM PYTHON SOURCE LINES 67-68

Fit the model and learn rank1 atoms

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    cdl.fit(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ..............
    [BatchCDL] Converged after 14 iteration, (dz, du) = 8.570e-05, 8.726e-05
    [BatchCDL] Fit in 961.4s

    <alphacsc.convolutional_dictionary_learning.BatchCDL object at 0x7faaf56f9790>



.. GENERATED FROM PYTHON SOURCE LINES 71-73

Display the 4-th atom, which displays a :math:`\mu`-waveform in its temporal
pattern.

.. GENERATED FROM PYTHON SOURCE LINES 73-108

.. code-block:: default


    import mne
    import numpy as np
    import matplotlib.pyplot as plt

    i_atom = 4
    n_plots = 3
    figsize = (n_plots * 5, 5.5)
    fig, axes = plt.subplots(1, n_plots, figsize=figsize, squeeze=False)

    # Plot the spatial map of the learn atom using mne topomap
    ax = axes[0, 0]
    u_hat = cdl.u_hat_[i_atom]
    mne.viz.plot_topomap(u_hat, info, axes=ax, show=False)
    ax.set(title='Learned spatial pattern')

    # Plot the temporal pattern of the learn atom
    ax = axes[0, 1]
    v_hat = cdl.v_hat_[i_atom]
    t = np.arange(v_hat.size) / sfreq
    ax.plot(t, v_hat)
    ax.set(xlabel='Time (sec)', title='Learned temporal waveform')
    ax.grid(True)

    # Plot the psd of the time atom
    ax = axes[0, 2]
    psd = np.abs(np.fft.rfft(v_hat)) ** 2
    frequencies = np.linspace(0, sfreq / 2.0, len(psd))
    ax.semilogy(frequencies, psd)
    ax.set(xlabel='Frequencies (Hz)', title='Power Spectral Density')
    ax.grid(True)
    ax.set_xlim(0, 30)

    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :alt: Learned spatial pattern, Learned temporal waveform, Power Spectral Density
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_somato_mu_waves_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 16 minutes  56.909 seconds)


.. _sphx_glr_download_auto_examples_multicsc_plot_somato_mu_waves.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_somato_mu_waves.py <plot_somato_mu_waves.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_somato_mu_waves.ipynb <plot_somato_mu_waves.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

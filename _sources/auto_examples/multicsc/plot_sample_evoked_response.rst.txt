
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multicsc/plot_sample_evoked_response.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_multicsc_plot_sample_evoked_response.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multicsc_plot_sample_evoked_response.py:


=====================================================================
Extracting artifact and evoked response atoms from the sample dataset
=====================================================================

This example illustrates how to learn rank-1 [1]_ atoms on the multivariate
sample dataset from :code:`mne`. We display a selection of atoms, featuring
heartbeat and eyeblink artifacts, two atoms of evoked responses, and a
non-sinusoidal oscillation.

.. [1] Dupré La Tour, T., Moreau, T., Jas, M., & Gramfort, A. (2018).
    `Multivariate Convolutional Sparse Coding for Electromagnetic Brain Signals
    <https://arxiv.org/abs/1805.09654v2>`_. Advances in Neural Information
    Processing Systems (NIPS).

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: default


    # Authors: Thomas Moreau <thomas.moreau@inria.fr>
    #          Mainak Jas <mainak.jas@telecom-paristech.fr>
    #          Tom Dupre La Tour <tom.duprelatour@telecom-paristech.fr>
    #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)









.. GENERATED FROM PYTHON SOURCE LINES 27-28

Let us first define the parameters of our model.

.. GENERATED FROM PYTHON SOURCE LINES 28-49

.. code-block:: default


    # sampling frequency. The signal will be resampled to match this.
    sfreq = 150.

    # Define the shape of the dictionary
    n_atoms = 40
    n_times_atom = int(round(sfreq * 1.0))  # 1000. ms

    # Regularization parameter which control sparsity
    reg = 0.1

    # number of processors for parallel computing
    n_jobs = 5

    # To accelerate the run time of this example, we split the signal in n_slits.
    # The number of splits should actually be the smallest possible to avoid
    # introducing border artifacts in the learned atoms and it should be not much
    # larger than n_jobs.
    n_splits = 10









.. GENERATED FROM PYTHON SOURCE LINES 50-51

Next, we define the parameters for multivariate CSC

.. GENERATED FROM PYTHON SOURCE LINES 51-87

.. code-block:: default


    from alphacsc import GreedyCDL
    cdl = GreedyCDL(
        # Shape of the dictionary
        n_atoms=n_atoms,
        n_times_atom=n_times_atom,
        # Request a rank1 dictionary with unit norm temporal and spatial maps
        rank1=True,
        uv_constraint='separate',
        # apply a temporal window reparametrization
        window=True,
        # at the end, refit the activations with fixed support and no reg to unbias
        unbiased_z_hat=True,
        # Initialize the dictionary with random chunk from the data
        D_init='chunk',
        # rescale the regularization parameter to be a percentage of lambda_max
        lmbd_max="scaled",
        reg=reg,
        # Number of iteration for the alternate minimization and cvg threshold
        n_iter=100,
        eps=1e-4,
        # solver for the z-step
        solver_z="lgcd",
        solver_z_kwargs={'tol': 1e-3,
                         'max_iter': 100000},
        # solver for the d-step
        solver_d='alternate_adaptive',
        solver_d_kwargs={'max_iter': 300},
        # sort atoms by explained variances
        sort_atoms=True,
        # Technical parameters
        verbose=1,
        random_state=0,
        n_jobs=n_jobs)









.. GENERATED FROM PYTHON SOURCE LINES 88-92

Load the sample data from MNE-python and select the gradiometer channels.
The MNE sample data contains MEG recordings of a subject with visual and
auditory stimuli. We load the data using utilities from MNE-python as a Raw
object and select the gradiometers from the signal.

.. GENERATED FROM PYTHON SOURCE LINES 92-107

.. code-block:: default


    import os
    import mne
    import numpy as np

    print("Loading the data...", end='', flush=True)
    data_path = mne.datasets.sample.data_path()
    subjects_dir = os.path.join(data_path, "subjects")
    data_dir = os.path.join(data_path, 'MEG', 'sample')
    file_name = os.path.join(data_dir, 'sample_audvis_raw.fif')
    raw = mne.io.read_raw_fif(file_name, preload=True, verbose=False)
    raw.pick_types(meg='grad', eeg=False, eog=False, stim=True)
    print('done')






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Loading the data...Using default location ~/mne_data for sample...
      0%|                                              | 0.00/1.65G [00:00<?, ?B/s]      0%|                                     | 3.69M/1.65G [00:00<00:44, 36.9MB/s]      1%|▏                                    | 9.34M/1.65G [00:00<00:33, 48.4MB/s]      1%|▎                                    | 15.2M/1.65G [00:00<00:30, 53.0MB/s]      1%|▍                                    | 21.0M/1.65G [00:00<00:29, 55.2MB/s]      2%|▌                                    | 26.9M/1.65G [00:00<00:28, 56.3MB/s]      2%|▋                                    | 32.7M/1.65G [00:00<00:28, 57.0MB/s]      2%|▊                                    | 38.6M/1.65G [00:00<00:28, 57.6MB/s]      3%|▉                                    | 44.5M/1.65G [00:00<00:27, 58.0MB/s]      3%|█▏                                   | 50.3M/1.65G [00:00<00:27, 58.2MB/s]      3%|█▎                                   | 56.2M/1.65G [00:01<00:27, 58.2MB/s]      4%|█▍                                   | 62.0M/1.65G [00:01<00:27, 58.4MB/s]      4%|█▌                                   | 67.9M/1.65G [00:01<00:27, 58.5MB/s]      4%|█▋                                   | 73.8M/1.65G [00:01<00:26, 58.5MB/s]      5%|█▊                                   | 79.7M/1.65G [00:01<00:26, 58.7MB/s]      5%|█▉                                   | 85.6M/1.65G [00:01<00:26, 58.8MB/s]      6%|██                                   | 91.5M/1.65G [00:01<00:26, 58.9MB/s]      6%|██▏                                  | 97.4M/1.65G [00:01<00:26, 59.0MB/s]      6%|██▍                                   | 103M/1.65G [00:01<00:26, 59.0MB/s]      7%|██▌                                   | 109M/1.65G [00:01<00:26, 58.2MB/s]      7%|██▋                                   | 115M/1.65G [00:02<00:26, 58.4MB/s]      7%|██▊                                   | 121M/1.65G [00:02<00:26, 58.7MB/s]      8%|██▉                                   | 127M/1.65G [00:02<00:25, 58.8MB/s]      8%|███                                   | 133M/1.65G [00:02<00:25, 58.8MB/s]      8%|███▏                                  | 139M/1.65G [00:02<00:25, 58.5MB/s]      9%|███▎                                  | 145M/1.65G [00:02<00:25, 58.5MB/s]      9%|███▍                                  | 150M/1.65G [00:02<00:25, 58.5MB/s]      9%|███▌                                  | 156M/1.65G [00:02<00:25, 58.5MB/s]     10%|███▋                                  | 162M/1.65G [00:02<00:25, 58.6MB/s]     10%|███▊                                  | 168M/1.65G [00:02<00:25, 58.6MB/s]     11%|███▉                                  | 174M/1.65G [00:03<00:25, 58.7MB/s]     11%|████▏                                 | 180M/1.65G [00:03<00:25, 58.6MB/s]     11%|████▎                                 | 186M/1.65G [00:03<00:25, 58.7MB/s]     12%|████▍                                 | 192M/1.65G [00:03<00:24, 58.7MB/s]     12%|████▌                                 | 197M/1.65G [00:03<00:24, 58.8MB/s]     12%|████▋                                 | 203M/1.65G [00:03<00:24, 58.7MB/s]     13%|████▊                                 | 209M/1.65G [00:03<00:24, 58.7MB/s]     13%|████▉                                 | 215M/1.65G [00:03<00:24, 58.7MB/s]     13%|█████                                 | 221M/1.65G [00:03<00:24, 58.8MB/s]     14%|█████▏                                | 227M/1.65G [00:03<00:24, 58.8MB/s]     14%|█████▎                                | 233M/1.65G [00:04<00:24, 58.9MB/s]     14%|█████▍                                | 239M/1.65G [00:04<00:23, 59.0MB/s]     15%|█████▌                                | 245M/1.65G [00:04<00:23, 59.1MB/s]     15%|█████▊                                | 251M/1.65G [00:04<00:23, 59.1MB/s]     16%|█████▉                                | 256M/1.65G [00:04<00:23, 59.1MB/s]     16%|██████                                | 262M/1.65G [00:04<00:23, 59.0MB/s]     16%|██████▏                               | 268M/1.65G [00:04<00:23, 59.1MB/s]     17%|██████▎                               | 274M/1.65G [00:04<00:23, 59.0MB/s]     17%|██████▍                               | 280M/1.65G [00:04<00:23, 59.0MB/s]     17%|██████▌                               | 286M/1.65G [00:04<00:23, 59.0MB/s]     18%|██████▋                               | 292M/1.65G [00:05<00:23, 58.9MB/s]     18%|██████▊                               | 298M/1.65G [00:05<00:22, 58.9MB/s]     18%|██████▉                               | 304M/1.65G [00:05<00:22, 58.9MB/s]     19%|███████                               | 310M/1.65G [00:05<00:22, 58.9MB/s]     19%|███████▎                              | 315M/1.65G [00:05<00:22, 58.9MB/s]     19%|███████▍                              | 321M/1.65G [00:05<00:22, 58.8MB/s]     20%|███████▌                              | 327M/1.65G [00:05<00:22, 58.8MB/s]     20%|███████▋                              | 333M/1.65G [00:05<00:22, 58.8MB/s]     21%|███████▊                              | 339M/1.65G [00:05<00:22, 58.3MB/s]     21%|███████▉                              | 345M/1.65G [00:05<00:22, 58.3MB/s]     21%|████████                              | 351M/1.65G [00:06<00:22, 58.4MB/s]     22%|████████▏                             | 357M/1.65G [00:06<00:22, 58.6MB/s]     22%|████████▎                             | 363M/1.65G [00:06<00:21, 58.8MB/s]     22%|████████▍                             | 368M/1.65G [00:06<00:21, 58.9MB/s]     23%|████████▌                             | 374M/1.65G [00:06<00:21, 58.9MB/s]     23%|████████▋                             | 380M/1.65G [00:06<00:21, 58.9MB/s]     23%|████████▉                             | 386M/1.65G [00:06<00:21, 58.9MB/s]     24%|█████████                             | 392M/1.65G [00:06<00:21, 58.7MB/s]     24%|█████████▏                            | 398M/1.65G [00:06<00:21, 58.6MB/s]     24%|█████████▎                            | 404M/1.65G [00:06<00:21, 58.7MB/s]     25%|█████████▍                            | 410M/1.65G [00:07<00:21, 58.8MB/s]     25%|█████████▌                            | 416M/1.65G [00:07<00:20, 59.0MB/s]     26%|█████████▋                            | 422M/1.65G [00:07<00:20, 59.0MB/s]     26%|█████████▊                            | 427M/1.65G [00:07<00:20, 59.0MB/s]     26%|█████████▉                            | 433M/1.65G [00:07<00:20, 59.0MB/s]     27%|██████████                            | 439M/1.65G [00:07<00:20, 58.9MB/s]     27%|██████████▏                           | 445M/1.65G [00:07<00:20, 59.0MB/s]     27%|██████████▎                           | 451M/1.65G [00:07<00:20, 58.7MB/s]     28%|██████████▌                           | 457M/1.65G [00:07<00:20, 58.9MB/s]     28%|██████████▋                           | 463M/1.65G [00:07<00:20, 59.0MB/s]     28%|██████████▊                           | 469M/1.65G [00:08<00:20, 59.0MB/s]     29%|██████████▉                           | 475M/1.65G [00:08<00:19, 58.9MB/s]     29%|███████████                           | 481M/1.65G [00:08<00:19, 58.9MB/s]     29%|███████████▏                          | 487M/1.65G [00:08<00:19, 58.9MB/s]     30%|███████████▎                          | 492M/1.65G [00:08<00:19, 58.7MB/s]     30%|███████████▍                          | 498M/1.65G [00:08<00:19, 58.7MB/s]     31%|███████████▌                          | 504M/1.65G [00:08<00:19, 57.9MB/s]     31%|███████████▋                          | 510M/1.65G [00:08<00:19, 58.1MB/s]     31%|███████████▊                          | 516M/1.65G [00:08<00:19, 58.3MB/s]     32%|███████████▉                          | 522M/1.65G [00:08<00:19, 58.4MB/s]     32%|████████████▏                         | 528M/1.65G [00:09<00:19, 58.5MB/s]     32%|████████████▎                         | 534M/1.65G [00:09<00:19, 58.6MB/s]     33%|████████████▍                         | 539M/1.65G [00:09<00:18, 58.7MB/s]     33%|████████████▌                         | 545M/1.65G [00:09<00:18, 58.8MB/s]     33%|████████████▋                         | 551M/1.65G [00:09<00:18, 58.6MB/s]     34%|████████████▊                         | 557M/1.65G [00:09<00:18, 58.3MB/s]     34%|████████████▉                         | 563M/1.65G [00:09<00:18, 58.3MB/s]     34%|█████████████                         | 569M/1.65G [00:09<00:19, 54.5MB/s]     35%|█████████████▏                        | 574M/1.65G [00:09<00:22, 47.1MB/s]     35%|█████████████▎                        | 580M/1.65G [00:10<00:21, 49.6MB/s]     35%|█████████████▍                        | 586M/1.65G [00:10<00:20, 52.0MB/s]     36%|█████████████▌                        | 592M/1.65G [00:10<00:19, 53.8MB/s]     36%|█████████████▋                        | 598M/1.65G [00:10<00:19, 55.2MB/s]     37%|█████████████▊                        | 603M/1.65G [00:10<00:18, 56.1MB/s]     37%|██████████████                        | 609M/1.65G [00:10<00:18, 56.8MB/s]     37%|██████████████▏                       | 615M/1.65G [00:10<00:18, 57.3MB/s]     38%|██████████████▎                       | 621M/1.65G [00:10<00:17, 57.8MB/s]     38%|██████████████▍                       | 627M/1.65G [00:10<00:17, 58.0MB/s]     38%|██████████████▌                       | 633M/1.65G [00:10<00:17, 58.2MB/s]     39%|██████████████▋                       | 639M/1.65G [00:11<00:17, 58.3MB/s]     39%|██████████████▊                       | 644M/1.65G [00:11<00:17, 58.5MB/s]     39%|██████████████▉                       | 650M/1.65G [00:11<00:17, 58.4MB/s]     40%|███████████████                       | 656M/1.65G [00:11<00:17, 58.5MB/s]     40%|███████████████▏                      | 662M/1.65G [00:11<00:16, 58.6MB/s]     40%|███████████████▎                      | 668M/1.65G [00:11<00:16, 58.7MB/s]     41%|███████████████▍                      | 674M/1.65G [00:11<00:16, 58.8MB/s]     41%|███████████████▋                      | 680M/1.65G [00:11<00:16, 58.9MB/s]     41%|███████████████▊                      | 686M/1.65G [00:11<00:16, 58.9MB/s]     42%|███████████████▉                      | 692M/1.65G [00:11<00:16, 58.8MB/s]     42%|████████████████                      | 697M/1.65G [00:12<00:16, 58.9MB/s]     43%|████████████████▏                     | 703M/1.65G [00:12<00:16, 59.1MB/s]     43%|████████████████▎                     | 709M/1.65G [00:12<00:15, 59.0MB/s]     43%|████████████████▍                     | 715M/1.65G [00:12<00:15, 59.0MB/s]     44%|████████████████▌                     | 721M/1.65G [00:12<00:15, 59.1MB/s]     44%|████████████████▋                     | 727M/1.65G [00:12<00:15, 59.1MB/s]     44%|████████████████▊                     | 733M/1.65G [00:12<00:15, 59.1MB/s]     45%|████████████████▉                     | 739M/1.65G [00:12<00:15, 59.1MB/s]     45%|█████████████████                     | 745M/1.65G [00:12<00:15, 59.1MB/s]     45%|█████████████████▎                    | 751M/1.65G [00:12<00:15, 59.0MB/s]     46%|█████████████████▍                    | 757M/1.65G [00:13<00:15, 58.3MB/s]     46%|█████████████████▌                    | 762M/1.65G [00:13<00:15, 57.7MB/s]     46%|█████████████████▋                    | 768M/1.65G [00:13<00:15, 58.1MB/s]     47%|█████████████████▊                    | 774M/1.65G [00:13<00:15, 58.4MB/s]     47%|█████████████████▉                    | 780M/1.65G [00:13<00:14, 58.5MB/s]     48%|██████████████████                    | 786M/1.65G [00:13<00:14, 58.8MB/s]     48%|██████████████████▏                   | 792M/1.65G [00:13<00:14, 58.9MB/s]     48%|██████████████████▎                   | 798M/1.65G [00:13<00:14, 58.8MB/s]     49%|██████████████████▍                   | 804M/1.65G [00:13<00:14, 58.9MB/s]     49%|██████████████████▌                   | 810M/1.65G [00:13<00:14, 58.9MB/s]     49%|██████████████████▊                   | 816M/1.65G [00:14<00:14, 59.0MB/s]     50%|██████████████████▉                   | 821M/1.65G [00:14<00:14, 58.9MB/s]     50%|███████████████████                   | 827M/1.65G [00:14<00:13, 59.0MB/s]     50%|███████████████████▏                  | 833M/1.65G [00:14<00:13, 59.0MB/s]     51%|███████████████████▎                  | 839M/1.65G [00:14<00:13, 58.9MB/s]     51%|███████████████████▍                  | 845M/1.65G [00:14<00:13, 58.8MB/s]     51%|███████████████████▌                  | 851M/1.65G [00:14<00:13, 58.8MB/s]     52%|███████████████████▋                  | 857M/1.65G [00:14<00:13, 58.7MB/s]     52%|███████████████████▊                  | 863M/1.65G [00:14<00:13, 58.8MB/s]     53%|███████████████████▉                  | 869M/1.65G [00:14<00:13, 58.8MB/s]     53%|████████████████████                  | 875M/1.65G [00:15<00:13, 58.8MB/s]     53%|████████████████████▏                 | 880M/1.65G [00:15<00:13, 58.8MB/s]     54%|████████████████████▍                 | 886M/1.65G [00:15<00:13, 58.8MB/s]     54%|████████████████████▌                 | 892M/1.65G [00:15<00:12, 58.8MB/s]     54%|████████████████████▋                 | 898M/1.65G [00:15<00:12, 58.8MB/s]     55%|████████████████████▊                 | 904M/1.65G [00:15<00:12, 58.8MB/s]     55%|████████████████████▉                 | 910M/1.65G [00:15<00:12, 58.9MB/s]     55%|█████████████████████                 | 916M/1.65G [00:15<00:12, 58.9MB/s]     56%|█████████████████████▏                | 922M/1.65G [00:15<00:12, 59.0MB/s]     56%|█████████████████████▎                | 928M/1.65G [00:15<00:12, 59.0MB/s]     56%|█████████████████████▍                | 934M/1.65G [00:16<00:12, 59.0MB/s]     57%|█████████████████████▌                | 939M/1.65G [00:16<00:12, 58.9MB/s]     57%|█████████████████████▋                | 945M/1.65G [00:16<00:11, 59.0MB/s]     58%|█████████████████████▊                | 951M/1.65G [00:16<00:11, 59.1MB/s]     58%|██████████████████████                | 957M/1.65G [00:16<00:11, 59.1MB/s]     58%|██████████████████████▏               | 963M/1.65G [00:16<00:11, 59.1MB/s]     59%|██████████████████████▎               | 969M/1.65G [00:16<00:11, 58.9MB/s]     59%|██████████████████████▍               | 975M/1.65G [00:16<00:11, 58.9MB/s]     59%|██████████████████████▌               | 981M/1.65G [00:16<00:11, 58.9MB/s]     60%|██████████████████████▋               | 987M/1.65G [00:16<00:11, 58.9MB/s]     60%|██████████████████████▊               | 993M/1.65G [00:17<00:11, 58.9MB/s]     60%|██████████████████████▉               | 998M/1.65G [00:17<00:11, 58.9MB/s]     61%|██████████████████████▍              | 1.00G/1.65G [00:17<00:11, 58.9MB/s]     61%|██████████████████████▌              | 1.01G/1.65G [00:17<00:10, 58.8MB/s]     61%|██████████████████████▋              | 1.02G/1.65G [00:17<00:10, 58.7MB/s]     62%|██████████████████████▉              | 1.02G/1.65G [00:17<00:10, 58.7MB/s]     62%|███████████████████████              | 1.03G/1.65G [00:17<00:10, 58.4MB/s]     63%|███████████████████████▏             | 1.03G/1.65G [00:17<00:10, 58.3MB/s]     63%|███████████████████████▎             | 1.04G/1.65G [00:17<00:10, 58.5MB/s]     63%|███████████████████████▍             | 1.05G/1.65G [00:17<00:10, 58.7MB/s]     64%|███████████████████████▌             | 1.05G/1.65G [00:18<00:10, 58.8MB/s]     64%|███████████████████████▋             | 1.06G/1.65G [00:18<00:10, 58.8MB/s]     64%|███████████████████████▊             | 1.06G/1.65G [00:18<00:10, 58.9MB/s]     65%|███████████████████████▉             | 1.07G/1.65G [00:18<00:09, 59.0MB/s]     65%|████████████████████████             | 1.08G/1.65G [00:18<00:11, 49.4MB/s]     65%|████████████████████████▏            | 1.08G/1.65G [00:18<00:11, 50.6MB/s]     66%|████████████████████████▎            | 1.09G/1.65G [00:18<00:10, 52.7MB/s]     66%|████████████████████████▍            | 1.09G/1.65G [00:18<00:10, 54.4MB/s]     66%|████████████████████████▌            | 1.10G/1.65G [00:18<00:09, 55.7MB/s]     67%|████████████████████████▋            | 1.10G/1.65G [00:18<00:09, 56.7MB/s]     67%|████████████████████████▊            | 1.11G/1.65G [00:19<00:09, 57.4MB/s]     68%|████████████████████████▉            | 1.12G/1.65G [00:19<00:09, 57.9MB/s]     68%|█████████████████████████            | 1.12G/1.65G [00:19<00:09, 58.2MB/s]     68%|█████████████████████████▏           | 1.13G/1.65G [00:19<00:08, 58.5MB/s]     69%|█████████████████████████▍           | 1.13G/1.65G [00:19<00:08, 58.6MB/s]     69%|█████████████████████████▌           | 1.14G/1.65G [00:19<00:08, 58.6MB/s]     69%|█████████████████████████▋           | 1.15G/1.65G [00:19<00:08, 58.3MB/s]     70%|█████████████████████████▊           | 1.15G/1.65G [00:19<00:08, 58.4MB/s]     70%|█████████████████████████▉           | 1.16G/1.65G [00:19<00:08, 58.6MB/s]     70%|██████████████████████████           | 1.16G/1.65G [00:19<00:08, 58.7MB/s]     71%|██████████████████████████▏          | 1.17G/1.65G [00:20<00:08, 58.8MB/s]     71%|██████████████████████████▎          | 1.17G/1.65G [00:20<00:08, 58.8MB/s]     71%|██████████████████████████▍          | 1.18G/1.65G [00:20<00:08, 58.9MB/s]     72%|██████████████████████████▌          | 1.19G/1.65G [00:20<00:07, 59.0MB/s]     72%|██████████████████████████▋          | 1.19G/1.65G [00:20<00:07, 58.8MB/s]     73%|██████████████████████████▊          | 1.20G/1.65G [00:20<00:07, 58.9MB/s]     73%|██████████████████████████▉          | 1.20G/1.65G [00:20<00:07, 58.8MB/s]     73%|███████████████████████████          | 1.21G/1.65G [00:20<00:07, 58.8MB/s]     74%|███████████████████████████▏         | 1.22G/1.65G [00:20<00:07, 58.9MB/s]     74%|███████████████████████████▎         | 1.22G/1.65G [00:20<00:07, 58.9MB/s]     74%|███████████████████████████▍         | 1.23G/1.65G [00:21<00:07, 58.9MB/s]     75%|███████████████████████████▌         | 1.23G/1.65G [00:21<00:07, 58.8MB/s]     75%|███████████████████████████▊         | 1.24G/1.65G [00:21<00:07, 58.8MB/s]     75%|███████████████████████████▉         | 1.25G/1.65G [00:21<00:06, 58.8MB/s]     76%|████████████████████████████         | 1.25G/1.65G [00:21<00:06, 58.9MB/s]     76%|████████████████████████████▏        | 1.26G/1.65G [00:21<00:06, 58.9MB/s]     76%|████████████████████████████▎        | 1.26G/1.65G [00:21<00:06, 58.6MB/s]     77%|████████████████████████████▍        | 1.27G/1.65G [00:21<00:06, 58.5MB/s]     77%|████████████████████████████▌        | 1.27G/1.65G [00:21<00:06, 58.5MB/s]     77%|████████████████████████████▋        | 1.28G/1.65G [00:21<00:06, 58.5MB/s]     78%|████████████████████████████▊        | 1.29G/1.65G [00:22<00:06, 58.7MB/s]     78%|████████████████████████████▉        | 1.29G/1.65G [00:22<00:06, 58.8MB/s]     79%|█████████████████████████████        | 1.30G/1.65G [00:22<00:06, 58.7MB/s]     79%|█████████████████████████████▏       | 1.30G/1.65G [00:22<00:05, 58.7MB/s]     79%|█████████████████████████████▎       | 1.31G/1.65G [00:22<00:05, 58.6MB/s]     80%|█████████████████████████████▍       | 1.32G/1.65G [00:22<00:05, 58.6MB/s]     80%|█████████████████████████████▌       | 1.32G/1.65G [00:22<00:05, 58.6MB/s]     80%|█████████████████████████████▋       | 1.33G/1.65G [00:22<00:05, 58.7MB/s]     81%|█████████████████████████████▊       | 1.33G/1.65G [00:22<00:05, 58.7MB/s]     81%|█████████████████████████████▉       | 1.34G/1.65G [00:23<00:05, 58.6MB/s]     81%|██████████████████████████████       | 1.35G/1.65G [00:23<00:05, 58.6MB/s]     82%|██████████████████████████████▏      | 1.35G/1.65G [00:23<00:05, 58.6MB/s]     82%|██████████████████████████████▍      | 1.36G/1.65G [00:23<00:05, 58.6MB/s]     82%|██████████████████████████████▌      | 1.36G/1.65G [00:23<00:04, 58.5MB/s]     83%|██████████████████████████████▋      | 1.37G/1.65G [00:23<00:04, 58.6MB/s]     83%|██████████████████████████████▊      | 1.37G/1.65G [00:23<00:04, 58.8MB/s]     84%|██████████████████████████████▉      | 1.38G/1.65G [00:23<00:04, 58.8MB/s]     84%|███████████████████████████████      | 1.39G/1.65G [00:23<00:04, 58.8MB/s]     84%|███████████████████████████████▏     | 1.39G/1.65G [00:23<00:04, 58.8MB/s]     85%|███████████████████████████████▎     | 1.40G/1.65G [00:24<00:04, 58.8MB/s]     85%|███████████████████████████████▍     | 1.40G/1.65G [00:24<00:04, 58.9MB/s]     85%|███████████████████████████████▌     | 1.41G/1.65G [00:24<00:04, 59.0MB/s]     86%|███████████████████████████████▋     | 1.42G/1.65G [00:24<00:04, 59.1MB/s]     86%|███████████████████████████████▊     | 1.42G/1.65G [00:24<00:03, 59.1MB/s]     86%|███████████████████████████████▉     | 1.43G/1.65G [00:24<00:03, 59.0MB/s]     87%|████████████████████████████████     | 1.43G/1.65G [00:24<00:04, 53.6MB/s]     87%|████████████████████████████████▏    | 1.44G/1.65G [00:24<00:04, 48.2MB/s]     87%|████████████████████████████████▎    | 1.45G/1.65G [00:24<00:04, 50.9MB/s]     88%|████████████████████████████████▍    | 1.45G/1.65G [00:24<00:03, 53.0MB/s]     88%|████████████████████████████████▌    | 1.46G/1.65G [00:25<00:03, 54.7MB/s]     88%|████████████████████████████████▋    | 1.46G/1.65G [00:25<00:03, 55.8MB/s]     89%|████████████████████████████████▉    | 1.47G/1.65G [00:25<00:03, 56.7MB/s]     89%|█████████████████████████████████    | 1.47G/1.65G [00:25<00:03, 57.3MB/s]     90%|█████████████████████████████████▏   | 1.48G/1.65G [00:25<00:02, 57.9MB/s]     90%|█████████████████████████████████▎   | 1.49G/1.65G [00:25<00:02, 58.3MB/s]     90%|█████████████████████████████████▍   | 1.49G/1.65G [00:25<00:02, 58.4MB/s]     91%|█████████████████████████████████▌   | 1.50G/1.65G [00:25<00:02, 58.5MB/s]     91%|█████████████████████████████████▋   | 1.50G/1.65G [00:25<00:02, 58.6MB/s]     91%|█████████████████████████████████▊   | 1.51G/1.65G [00:25<00:02, 58.7MB/s]     92%|█████████████████████████████████▉   | 1.52G/1.65G [00:26<00:02, 58.9MB/s]     92%|██████████████████████████████████   | 1.52G/1.65G [00:26<00:02, 58.9MB/s]     92%|██████████████████████████████████▏  | 1.53G/1.65G [00:26<00:02, 58.9MB/s]     93%|██████████████████████████████████▎  | 1.53G/1.65G [00:26<00:02, 58.7MB/s]     93%|██████████████████████████████████▍  | 1.54G/1.65G [00:26<00:01, 58.7MB/s]     93%|██████████████████████████████████▌  | 1.55G/1.65G [00:26<00:01, 58.7MB/s]     94%|██████████████████████████████████▋  | 1.55G/1.65G [00:26<00:01, 58.7MB/s]     94%|██████████████████████████████████▊  | 1.56G/1.65G [00:26<00:01, 58.9MB/s]     95%|██████████████████████████████████▉  | 1.56G/1.65G [00:26<00:01, 58.7MB/s]     95%|███████████████████████████████████  | 1.57G/1.65G [00:26<00:01, 58.7MB/s]     95%|███████████████████████████████████▎ | 1.57G/1.65G [00:27<00:01, 58.7MB/s]     96%|███████████████████████████████████▍ | 1.58G/1.65G [00:27<00:01, 58.8MB/s]     96%|███████████████████████████████████▌ | 1.59G/1.65G [00:27<00:01, 58.8MB/s]     96%|███████████████████████████████████▋ | 1.59G/1.65G [00:27<00:01, 58.7MB/s]     97%|███████████████████████████████████▊ | 1.60G/1.65G [00:27<00:00, 58.8MB/s]     97%|███████████████████████████████████▉ | 1.60G/1.65G [00:27<00:00, 58.8MB/s]     97%|████████████████████████████████████ | 1.61G/1.65G [00:27<00:00, 58.9MB/s]     98%|████████████████████████████████████▏| 1.62G/1.65G [00:27<00:00, 58.8MB/s]     98%|████████████████████████████████████▎| 1.62G/1.65G [00:27<00:00, 58.9MB/s]     98%|████████████████████████████████████▍| 1.63G/1.65G [00:27<00:00, 58.9MB/s]     99%|████████████████████████████████████▌| 1.63G/1.65G [00:28<00:00, 58.8MB/s]     99%|████████████████████████████████████▋| 1.64G/1.65G [00:28<00:00, 58.8MB/s]    100%|████████████████████████████████████▊| 1.65G/1.65G [00:28<00:00, 58.7MB/s]    100%|████████████████████████████████████▉| 1.65G/1.65G [00:28<00:00, 58.7MB/s]      0%|                                              | 0.00/1.65G [00:00<?, ?B/s]    100%|█████████████████████████████████████| 1.65G/1.65G [00:00<00:00, 2.60TB/s]
    Removing projector <Projection | PCA-v1, active : False, n_channels : 102>
    Removing projector <Projection | PCA-v2, active : False, n_channels : 102>
    Removing projector <Projection | PCA-v3, active : False, n_channels : 102>
    done




.. GENERATED FROM PYTHON SOURCE LINES 108-111

Then, we remove the powerline artifacts and high-pass filter to remove the
drift which can impact the CSC technique. The signal is also resampled to
150 Hz to reduce the computationnal burden.

.. GENERATED FROM PYTHON SOURCE LINES 111-119

.. code-block:: default


    print("Preprocessing the data...", end='', flush=True)
    raw.notch_filter(np.arange(60, 181, 60), n_jobs=n_jobs, verbose=False)
    raw.filter(2, None, n_jobs=n_jobs, verbose=False)
    raw = raw.resample(sfreq, npad='auto', n_jobs=n_jobs, verbose=False)
    print('done')






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Preprocessing the data.../github/workspace/examples/multicsc/plot_sample_evoked_response.py:115: RuntimeWarning: Resampling of the stim channels caused event information to become unreliable. Consider finding events on the original data and passing the event matrix as a parameter.
      raw = raw.resample(sfreq, npad='auto', n_jobs=n_jobs, verbose=False)
    done




.. GENERATED FROM PYTHON SOURCE LINES 120-124

Load the data as an array and split it in chunks to allow parallel processing
during the model fit. Each split is considered as independent.
To reduce the impact of border artifacts, we use `apply_window=True`
which scales down the border of each split with a tukey window.

.. GENERATED FROM PYTHON SOURCE LINES 124-131

.. code-block:: default


    from alphacsc.utils import split_signal
    X = raw.get_data(picks=['meg'])
    info = raw.copy().pick_types(meg=True).info  # info of the loaded channels
    X_split = split_signal(X, n_splits=n_splits, apply_window=True)









.. GENERATED FROM PYTHON SOURCE LINES 132-133

Fit the model and learn rank1 atoms

.. GENERATED FROM PYTHON SOURCE LINES 133-137

.. code-block:: default


    cdl.fit(X_split)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ./github/workspace/alphacsc/utils/optim.py:136: DeprecationWarning: Please use `scalar_search_armijo` from the `scipy.optimize` namespace, the `scipy.optimize.linesearch` namespace is deprecated.
      step_size, obj_uv = optimize.linesearch.scalar_search_armijo(
    ................................................+
    ......
    [GreedyCDL] Converged after 56 iteration, (dz, du) = 9.879e-05, 9.739e-05
    [GreedyCDL] Fit in 6016.2s

    <alphacsc.convolutional_dictionary_learning.GreedyCDL object at 0x7ff2e1b3fac0>



.. GENERATED FROM PYTHON SOURCE LINES 138-142

Then we call the `transform` method, which returns the sparse codes
associated with X, without changing the dictionary learned during the `fit`.
Note that we transform on the *unsplit* data so that the sparse codes
reflect the original data and not the windowed data.

.. GENERATED FROM PYTHON SOURCE LINES 142-145

.. code-block:: default

    z_hat = cdl.transform(X[None, :])






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Refitting the activation to avoid amplitude bias...done




.. GENERATED FROM PYTHON SOURCE LINES 146-151

Display a selection of atoms
----------------------------

We recognize a heartbeat artifact, an eyeblink artifact, two atoms of evoked
responses, and a non-sinusoidal oscillation.

.. GENERATED FROM PYTHON SOURCE LINES 151-200

.. code-block:: default


    import matplotlib.pyplot as plt

    # preselected atoms of interest
    plotted_atoms = [0, 1, 2, 6, 4]

    n_plots = 3  # number of plots by atom
    n_columns = min(6, len(plotted_atoms))
    split = int(np.ceil(len(plotted_atoms) / n_columns))
    figsize = (4 * n_columns, 3 * n_plots * split)
    fig, axes = plt.subplots(n_plots * split, n_columns, figsize=figsize)
    for ii, kk in enumerate(plotted_atoms):

        # Select the axes to display the current atom
        print("\rDisplaying {}-th atom".format(kk), end='', flush=True)
        i_row, i_col = ii // n_columns, ii % n_columns
        it_axes = iter(axes[i_row * n_plots:(i_row + 1) * n_plots, i_col])

        # Select the current atom
        u_k = cdl.u_hat_[kk]
        v_k = cdl.v_hat_[kk]

        # Plot the spatial map of the atom using mne topomap
        ax = next(it_axes)
        mne.viz.plot_topomap(u_k, info, axes=ax, show=False)
        ax.set(title="Spatial pattern %d" % (kk, ))

        # Plot the temporal pattern of the atom
        ax = next(it_axes)
        t = np.arange(n_times_atom) / sfreq
        ax.plot(t, v_k)
        ax.set_xlim(0, n_times_atom / sfreq)
        ax.set(xlabel='Time (sec)', title="Temporal pattern %d" % kk)

        # Plot the power spectral density (PSD)
        ax = next(it_axes)
        psd = np.abs(np.fft.rfft(v_k, n=256)) ** 2
        frequencies = np.linspace(0, sfreq / 2.0, len(psd))
        ax.semilogy(frequencies, psd, label='PSD', color='k')
        ax.set(xlabel='Frequencies (Hz)', title="Power spectral density %d" % kk)
        ax.grid(True)
        ax.set_xlim(0, 30)
        ax.set_ylim(1e-4, 1e2)
        ax.legend()
    print("\rDisplayed {} atoms".format(len(plotted_atoms)).rjust(40))

    fig.tight_layout()





.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_sample_evoked_response_001.png
   :alt: Spatial pattern 0, Spatial pattern 1, Spatial pattern 2, Spatial pattern 6, Spatial pattern 4, Temporal pattern 0, Temporal pattern 1, Temporal pattern 2, Temporal pattern 6, Temporal pattern 4, Power spectral density 0, Power spectral density 1, Power spectral density 2, Power spectral density 6, Power spectral density 4
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_sample_evoked_response_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Displaying 0-th atom    Displaying 1-th atom    Displaying 2-th atom    Displaying 6-th atom    Displaying 4-th atom                          Displayed 5 atoms




.. GENERATED FROM PYTHON SOURCE LINES 201-209

Display the evoked reconstructed envelope
-----------------------------------------

The MNE sample data contains data for auditory (event_id=1 and 2) and
visual stimuli (event_id=3 and 4). We extract the events now so that we can
later identify the atoms related to different events. Note that the
convolutional sparse coding method does not need to know the events for
learning atoms.

.. GENERATED FROM PYTHON SOURCE LINES 209-216

.. code-block:: default


    event_id = [1, 2, 3, 4]
    events = mne.find_events(raw, stim_channel='STI 014')
    events = mne.pick_events(events, include=event_id)
    events[:, 0] -= raw.first_samp






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    319 events found
    Event IDs: [ 1  2  3  4  5 32]




.. GENERATED FROM PYTHON SOURCE LINES 217-222

For each atom (columns), and for each event (rows), we compute the envelope
of the reconstructed signal, align it with respect to the event onsets, and
take the average. For some atoms, the activations are correlated with the
events, leading to a large evoked envelope. The gray area corresponds to
not statistically significant values, computing with sampling.

.. GENERATED FROM PYTHON SOURCE LINES 222-267

.. code-block:: default


    from alphacsc.utils.signal import fast_hilbert
    from alphacsc.viz.epoch import plot_evoked_surrogates
    from alphacsc.utils.convolution import construct_X_multi

    # time window around the events. Note that for the sample datasets, the time
    # inter-event is around 0.5s
    t_lim = (-0.1, 0.5)

    n_plots = len(event_id)
    n_columns = min(6, len(plotted_atoms))
    split = int(np.ceil(len(plotted_atoms) / n_columns))
    figsize = (4 * n_columns, 3 * n_plots * split)
    fig, axes = plt.subplots(n_plots * split, n_columns, figsize=figsize)

    for ii, kk in enumerate(plotted_atoms):

        # Select the axes to display the current atom
        print("\rDisplaying {}-th atom envelope".format(kk), end='', flush=True)
        i_row, i_col = ii // n_columns, ii % n_columns
        it_axes = iter(axes[i_row * n_plots:(i_row + 1) * n_plots, i_col])

        # Select the current atom
        v_k = cdl.v_hat_[kk]
        v_k_1 = np.r_[[1], v_k][None]
        z_k = z_hat[:, kk:kk + 1]
        X_k = construct_X_multi(z_k, v_k_1, n_channels=1)[0, 0]

        # compute the 'envelope' of the reconstructed signal X_k
        correlation = np.abs(fast_hilbert(X_k))

        # loop over all events IDs
        for this_event_id in event_id:
            this_events = events[events[:, 2] == this_event_id]
            # plotting function
            ax = next(it_axes)
            this_info = info.copy()
            event_info = dict(event_id = this_event_id, events=events)
            this_info['temp'] = event_info
            plot_evoked_surrogates(correlation, info=this_info, t_lim=t_lim, ax=ax,
                                   n_jobs=n_jobs, label='event %d' % this_event_id)
            ax.set(xlabel='Time (sec)', title="Evoked envelope %d" % kk)
    print("\rDisplayed {} atoms".format(len(plotted_atoms)).rjust(40))
    fig.tight_layout()




.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_sample_evoked_response_002.png
   :alt: Evoked envelope 0, Evoked envelope 1, Evoked envelope 2, Evoked envelope 6, Evoked envelope 4, Evoked envelope 0, Evoked envelope 1, Evoked envelope 2, Evoked envelope 6, Evoked envelope 4, Evoked envelope 0, Evoked envelope 1, Evoked envelope 2, Evoked envelope 6, Evoked envelope 4, Evoked envelope 0, Evoked envelope 1, Evoked envelope 2, Evoked envelope 6, Evoked envelope 4
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_sample_evoked_response_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Displaying 0-th atom envelopeUsing data from preloaded Raw for 72 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 73 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 73 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 70 events and 91 original time points ...
    0 bad epochs dropped
    Displaying 1-th atom envelopeUsing data from preloaded Raw for 72 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 73 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 73 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 70 events and 91 original time points ...
    0 bad epochs dropped
    Displaying 2-th atom envelopeUsing data from preloaded Raw for 72 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 73 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 73 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 70 events and 91 original time points ...
    0 bad epochs dropped
    Displaying 6-th atom envelopeUsing data from preloaded Raw for 72 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 73 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 73 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 70 events and 91 original time points ...
    0 bad epochs dropped
    Displaying 4-th atom envelopeUsing data from preloaded Raw for 72 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 73 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 73 events and 91 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 70 events and 91 original time points ...
    0 bad epochs dropped
                          Displayed 5 atoms




.. GENERATED FROM PYTHON SOURCE LINES 268-285

Display the equivalent dipole for a learned topomap
---------------------------------------------------

Finally, let us fit a dipole to one of the atoms. To fit a dipole,
we need the following:

* BEM solution: Obtained by running the cortical reconstruction pipeline
  of Freesurfer and describes the conductivity of different tissues in
  the head.
* Trans: An affine transformation matrix needed to bring the data
  from sensor space to head space. This is usually done by coregistering
  the fiducials with the MRI.
* Noise covariance matrix: To whiten the data so that the assumption
  of Gaussian noise model with identity covariance matrix is satisfied.

We recommend users to consult the MNE documentation for further information.


.. GENERATED FROM PYTHON SOURCE LINES 285-293

.. code-block:: default

    subjects_dir = os.path.join(data_path, 'subjects')
    fname_bem = os.path.join(subjects_dir, 'sample', 'bem',
                             'sample-5120-bem-sol.fif')
    fname_trans = os.path.join(data_path, 'MEG', 'sample',
                               'sample_audvis_raw-trans.fif')
    fname_cov = os.path.join(data_path, 'MEG', 'sample', 'sample_audvis-cov.fif')









.. GENERATED FROM PYTHON SOURCE LINES 294-297

Let us construct an evoked object for MNE with the spatial pattern of the
atoms.


.. GENERATED FROM PYTHON SOURCE LINES 297-300

.. code-block:: default

    evoked = mne.EvokedArray(cdl.u_hat_.T, info)









.. GENERATED FROM PYTHON SOURCE LINES 301-303

Fit a dipole to each of the atoms.


.. GENERATED FROM PYTHON SOURCE LINES 303-307

.. code-block:: default

    dip = mne.fit_dipole(evoked, fname_cov, fname_bem, fname_trans,
                         n_jobs=n_jobs, verbose=False)[0]









.. GENERATED FROM PYTHON SOURCE LINES 308-311

Plot the dipole fit from the 3rd atom, linked to mu-wave and display the
goodness of fit.


.. GENERATED FROM PYTHON SOURCE LINES 311-339

.. code-block:: default


    atom_dipole_idx = 4

    from mpl_toolkits.mplot3d import Axes3D

    fig = plt.figure(figsize=(10, 4))

    # Display the dipole fit
    ax = fig.add_subplot(1, 3, 1, projection='3d')
    dip.plot_locations(fname_trans, 'sample', subjects_dir, idx=atom_dipole_idx,
                       ax=ax)
    ax.set_title('Atom #{} (GOF {:.2f}%)'.format(atom_dipole_idx,
                                                 dip.gof[atom_dipole_idx]))

    # Plot the spatial map
    ax = fig.add_subplot(1, 3, 2)
    mne.viz.plot_topomap(cdl.u_hat_[atom_dipole_idx], info, axes=ax)

    # Plot the temporal atom
    ax = fig.add_subplot(1, 3, 3)
    t = np.arange(n_times_atom) / sfreq
    ax.plot(t, cdl.v_hat_[atom_dipole_idx])
    ax.set_xlim(0, n_times_atom / sfreq)
    ax.set(xlabel='Time (sec)', title="Temporal pattern {}"
           .format(atom_dipole_idx))

    fig.suptitle('')
    fig.tight_layout()



.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_sample_evoked_response_003.png
   :alt: , Atom #4 (GOF 4.91%), Temporal pattern 4
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_sample_evoked_response_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 111 minutes  23.737 seconds)


.. _sphx_glr_download_auto_examples_multicsc_plot_sample_evoked_response.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_sample_evoked_response.py <plot_sample_evoked_response.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_sample_evoked_response.ipynb <plot_sample_evoked_response.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
